import React from 'react';
import { Link } from 'react-router-dom';
import { useLang } from '../LangContext';
import MvvmFlowDiagram from '../components/MvvmFlowDiagram';
import CodeCardCollapsible from '../components/CodeCardCollapsible';
import PerformanceAccordion from '../components/PerformanceAccordion';

const Home = () => {
  const { lang } = useLang();

  const content = {
    en: {
      title: "Seongjae Park",
      subtitle: "Game Client Developer",
      description: "C++ and Unreal Engine based MMORPG client programmer.<br/>Specialized in core game systems (Inventory, Equipment, QuickSlot) and MVVM-based UI architecture design and implementation.",
      projectU: {
        title: "ProjectR - MMORPG Client Development",
        date: "Date: 2021 ~ Present<br/><br/>",
        desc: "This project is a <strong>cross-platform (PC and mobile)</strong> large-scale MMORPG in the <strong>Lineage-like</strong> style, utilizing <strong>C++</strong> and <strong>Unreal Engine 5</strong> to achieve high graphics quality and optimal performance.<br/><br/>I joined the client development team as a team member in January 2022, taking charge of core aspects of the game including <strong>item systems</strong>, <strong>UI/UX</strong>, <strong>system architecture</strong> design, and optimization. We actively utilize the latest Unreal Engine 5 technologies such as <strong>World Partition</strong>, <strong>Nanite</strong>, and <strong>Gameplay Ability System (GAS)</strong>, and have introduced <strong>MVVM (Model-View-ViewModel)</strong> architecture for UI development to enhance code reusability and maintainability.<br/><br/>As this is currently an unreleased private project, the main content is text-focused.",
        tags: ["C++", "Unreal Engine 5", "MVVM", "Network Programming", "MMORPG"],
        role: "Unreal Client Programmer",
        teamSize: "100+ Developers",
        platforms: ["PC", "Mobile"]
      },
      technicalHighlights: {
        title: "Technical Highlights",
        architecture: {
          title: "MVVM Architecture",
          desc: "Implemented comprehensive MVVM pattern with 13 major game systems, Model-View separation, and delegate-based event handling for scalable UI architecture"
        },
        performance: {
          title: "Performance Optimization",
          desc: "Optimized network traffic with CMSG/CUP packet system, FieldNotify for efficient UI updates, and real-time data synchronization across 100+ concurrent users"
        },
        systems: {
          title: "Core Responsible Systems",
          desc: "Developed 13+ essential game systems including inventory management, equipment/gear system, party/community systems, and death/resurrection mechanics"
        }
      },
      contributions: {
        title: "Key Contributions",
        items: [
          {
            title: "Individual Game Systems (Inventory, Items, QuickSlot)",
            desc: "UID-based data management, client-server synchronization, automatic usage logic implementation",
            note: "Supporting essential individual gameplay features"
          },
          {
            title: "UI/UX System (MVVM Architecture)",
            desc: "13 major game systems MVVM implementation, complete UI/logic separation",
            note: "Improved maintainability and easy new feature expansion"
          },
          {
            title: "Multiplayer Interaction System (Party & Community)",
            desc: "Server data structuring ‚Üí HUD/minimap/character tag reflection",
            note: "Providing collaboration and communication features between multiple users"
          },
          {
            title: "Network Optimization System (Cooldown Synchronization)",
            desc: "Server timestamp-based real-time cooldown synchronization",
            note: "Solving client time mismatch issues"
          }
        ]
      },
      bitMaskDetails: {
        bitDivision: "Bit Area Division: Integrating registration conditions (0~15bit) and exclusion conditions (16~31bit) into a single integer",
        o1Filtering: "O(1) Filtering: Simplifying complex if-else logic with bit operations",
        scalableDesign: "Scalable Design: Only need to allocate bits when adding new filter conditions",
        innovativeArchitecture: "Innovative architecture that logically separates and manages two opposing concepts (registration/exclusion) with a single integer",
        quote: "Dividing a single int32 into 0~15bit (registration) and 16~31bit (exclusion) to solve complex filtering with simple bit operations"
      },
      performanceOptimization: {
        summaryTitle: "Performance Optimization Core Summary",
        filtering: {
          title: "Filtering:",
          desc: "BitMask compression ¬∑ O(1) judgment ¬∑ unified condition management"
        },
        icon: {
          title: "Icon:",
          desc: "Property caching + slot delta updates to reduce unnecessary regeneration ‚Üì"
        },
        inventory: {
          title: "Inventory:",
          desc: "Event-based UI synchronization with Observer + FieldNotify"
        },
        search: {
          title: "Search:",
          desc: "Grouping + multi-layer sorting for O(N) ‚Üí O(N log N) optimization"
        }
      },
      accordionItems: {
        bitmask: {
          title: "üîç BitMask-based O(1) Filtering System",
          badge: "Bit-unit compression management",
          preview: "A filtering system that integrates and manages registration/exclusion conditions by dividing a single integer into bit areas"
        },
        unifiedSlot: {
          title: "üí° Unified Slot Base System",
          badge: "Code duplication ‚Üì",
          preview: "A system designed with a unified base architecture (UBaseSlot) for slot systems, applying automatic UI component registration and delta updates"
        },
        inventoryObserver: {
          title: "üìù Inventory Interface (Observer)",
          badge: "UI update calls -35%",
          preview: "Model delegate subscription ‚Üí ViewModel FieldNotify ‚Üí UI automatic synchronization"
        },
        prioritySearch: {
          title: "‚ö° Priority-Based Search Optimization (Auto-Equip)",
          badge: "Search cost O(N) ‚Üí O(N log N)",
          preview: "Instead of iterating through the entire inventory every time, search costs were significantly reduced by grouping items and selecting only optimal slots through lambda-based dynamic priority sorting."
        }
      },
      codeComments: {
        model: "// Model: Party data and server communication",
        viewModel: "// ViewModel: UI and Model connection, automatic updates with FieldNotify",
        private: "// Private:",
        members: "// Members:",
        delegate: "// Delegate:",
        updateMember: "// Called when updating party member info from server",
        onPartyChanged: "// Called when party member status changes (from global Model)",
        fieldNotify: "// UI auto-refresh with FieldNotify",
        etc: "etc...",
        bitmask: {
          enumDefinition: "// BitMask Unified Filter System - Registration conditions (0~15bit) and exclusion conditions (16~31bit)",
          registrationConditions: "// Registration conditions (0~15 bit)",
          exclusionConditions: "// Exclusion conditions (16~31 bit)",
          gradeNormal: "Grade_Normal = 1 << 0,    // Normal grade items",
          gradeGoodly: "Grade_Goodly = 1 << 1,   // Good grade items",
          gradeRare: "Grade_Rare = 1 << 2,      // Rare grade items",
          gradeEpic: "Grade_Epic = 1 << 3,      // Epic grade items",
          gradeLegendary: "Grade_Legendary = 1 << 4, // Legendary grade items",
          excludeStartBit: "ExcludeStartBit = 1 << 16, // Exclusion condition start bit",
          pvpMode: "PvP_Mode = 1 << 17,         // PvP mode exclusion",
          tradeDisabled: "Trade_Disabled = 1 << 18, // Trade disabled exclusion",
          usage: "// Usage example",
          filterExample: "int32_t filter = Grade_Goodly | Grade_Rare; // Registration: Good and Rare grades",
          exclusionExample: "int32_t exclusion = PvP_Mode; // Exclusion: PvP mode",
          resultExample: "bool result = (filter & target) && !(exclusion & target); // O(1) filtering result",
          visibleMaskComment: "// VisibleMask: Filter mask applied to all content",
          activeMaskComment: "// ActiveMask: Filter mask for active content state",
          excludeCheckComment: "// Check exclusion conditions first (16~31 bit)",
          registrationCheckComment: "// Check registration conditions (0~15 bit)"
        },
        unifiedSlot: {
          baseClass: "// Unified Slot Base System - Automatic UI registration and delta updates",
          nativeConstruct: "// Automatic UI registration",
          updateSlotDelta: "// Delta update - only update changed slots",
          registerComponents: "// Automatic UI component registration",
          bindEvents: "// Event binding",
          refreshUI: "// UI refresh - only update changed parts",
          inventorySlot: "// Inventory slot implementation - inherits all UBaseSlot functionality",
          widgetTypeAccess: "// O(1) access by widget type",
          enumExtension: "// Extend only Enum when adding new widget types",
          inheritanceStructure: "// Inheritance structure",
          itemSpecific: "// Item-specific function",
          skillSpecific: "// Skill-specific function",
          buffSpecific: "// Buff-specific function",
          iconConfigData: "// ===== Icon configuration data =====",
          coreDataStructure: "// Core data structure (basis for automatic UI processing)",
          usagePurpose: "// Purpose of use such as item/skill/buff",
          uniqueId: "// Unique ID (ItemId, SkillId, ClassId, etc.)",
          widgetAttributeList: "// Widget attribute list: Type + Action + Value combination",
          constructor: "// Constructor: Initialize basic attributes with Scope + UniqueID",
          autoGenerate: "// Automatically generate basic attributes according to Scope",
          systemDescription: "Designed slot system with unified base architecture (UBaseSlot), applying automatic UI component registration and delta updates. As a result, slot UI call count was reduced by ~40%, and new attribute additions became extensible with just Enum definitions, significantly reducing maintenance costs.",
          problemTitle: "üîé Problem (Before)",
          problem1: "‚Ä¢ Icons/slots implemented separately, increasing code duplication and management costs",
          problem2: "‚Ä¢ Adding new attributes (e.g., cooldown, enhancement) requires modifying all slot classes",
          problem3: "‚Ä¢ UI rebuilt entirely every time ‚Üí frame drops, memory waste",
          solutionTitle: "üöÄ Solution (System Design)",
          solution1: "‚Ä¢ Unified base class to centralize icon UI/behavior",
          solution2: "‚Ä¢ Automatic widget registration ‚Üí just add Enum to extend",
          solution3: "‚Ä¢ Delta update ‚Üí only update changed slots",
          solution4: "‚Ä¢ Common interaction provision ‚Üí parent provides click¬∑longpress events, children just reuse",
          resultTitle: "üéØ Results (After)",
          result1: "‚Ä¢ Code duplication removed ‚Üí slot-related code ‚Üì significantly reduced",
          result2: "‚Ä¢ Extensibility secured ‚Üí new attributes reflected immediately with just Enum definitions",
          result3: "‚Ä¢ Rendering cost reduced ‚Üí eliminated full rebuild, slot UI call count ‚Üì significantly reduced",
          result4: "‚Ä¢ Maintainability improved ‚Üí all slots inherit from single UBaseSlot, minimizing modification scope",
          otherScopeHandling: "// ... Other Scope handling",
          widgetTypeDefinition: "// Widget type definition",
          widgetTypeEnum: "Icon, Grade, Count, CoolTime, Equip, Lock, Reinforce, ToolTip",
          extensible: "// ... Extensible",
          widgetAttributeUnit: "// Widget attribute unit",
          widgetType: "// Which widget",
          widgetAction: "// Which action to perform (Visibility, ResourcePath, CoolTime, etc.)",
          numericValue: "// Numeric value (e.g., enhancement level, item count, grade value, remaining cooldown time, etc.)"
        },
        coreSystems: {
          gameplayTitle: "üéÆ Gameplay Systems",
          gameplay1: "‚Ä¢ <strong>Inventory & Item System</strong>: item management, decomposition, deletion, temporary storage",
          gameplay2: "‚Ä¢ <strong>Equipment System</strong>: part-specific data management, dual weapon swap, auto-equip",
          gameplay3: "‚Ä¢ <strong>Death System</strong>: integrated management of recovery/record/revenge/tracking related to death",
          gameplay4: "‚Ä¢ <strong>Dungeon System</strong>: In-Progress-Wait-Out state-based dungeon management",
          contentTitle: "üè™ Content Systems",
          content1: "‚Ä¢ <strong>NPC Shop</strong>: item trading system",
          content2: "‚Ä¢ <strong>Preset System</strong>: save/load settings",
          content3: "‚Ä¢ <strong>Game Events</strong>: cumulative login rewards",
          content4: "‚Ä¢ <strong>Appearance System</strong>: character customization",
          techTitle: "üîß Technical Systems",
          tech1: "‚Ä¢ <strong>Toast Popup</strong>: user notification system",
          tech2: "‚Ä¢ <strong>Cheat System</strong>: development/test support",
          tech3: "‚Ä¢ <strong>Currency Management</strong>: gold, diamonds, etc.",
          tech4: "‚Ä¢ <strong>Community</strong>: user community management (party, friends, blocked users, etc.)",
          detailTitle: "üìä Implementation Details",
          detail1Label: "Total Systems:",
          detail1Value: "13 major systems",
          detail2Label: "Total Files:",
          detail2Value: "80+ .h/.cpp files",
          detail3Label: "Architecture:",
          detail3Value: "MVVM pattern",
          detail4Label: "Network:",
          detail4Value: "CMSG/CUP based"
        },
        iconSystem: {
          title: "üèóÔ∏è Icon System Architecture",
          subtitle: "UBaseSlot Icon System Hierarchy Diagram",
          description: "Visual diagram of icon inheritance structure and data flow centered around UBaseSlot base class"
        },
        inventoryObserver: {
          modelClass: "// Inventory Observer Pattern - Model with automatic UI updates",
          delegateDeclaration: "// Delegate declaration for inventory changes",
          updateInventory: "// Inventory data update - automatically notifies UI",
          viewModelClass: "// ViewModel subscribing to Observer",
          beginPlay: "// Subscribe to model delegate",
          handleUpdate: "// Automatic UI update with FieldNotify",
          interfaceAbstract: "Abstract actions (select/deselect/activate) through interfaces",
          observerEvent: "Observer delivers only change events",
          commandDelegate: "Unify input with Command-style delegates",
          looseCoupling: "Loose coupling improves extensibility‚Üë, code reusability‚Üë, maintainability",
          modelDelegateFlow: "Model delegate subscription ‚Üí ViewModel FieldNotify ‚Üí UI automatic synchronization"
        },
        prioritySearch: {
          optimizerClass: "// Priority-Based Search Optimization - Grouped item search",
          findOptimalSlots: "// Grouped item search",
          groupItems: "// 1. Group items by type",
          priorityFunction: "// 2. Lambda-based dynamic priority sorting",
          multiLayerSort: "// 3. Apply multi-layer sorting",
          selectTopSlots: "// 4. Select only optimal slots (O(N log N))",
          groupByType: "// Group items by type",
          calculatePriority: "// Dynamic priority calculation",
          itemRarity: "// Item rarity priority",
          playerLevel: "// Player level compatibility",
          itemCondition: "// Item condition (durability, enhancement, etc.)",
          coreOptimizationPoint: "// ===== Core Optimization Point =====",
          beforeOptimization: "// Before: O(N) - All inventory traversal",
          afterOptimization: "// After: O(N log N) - Grouping + Sorting + Single Search",
          lambdaPriority: "// Core: Lambda-based dynamic priority application",
          powerComparison: "// 1st: Power comparison",
          situationalPriority: "// 2nd: If power is equal, apply situational priority with lambda",
          situationalLambda: "// Situational lambda priority functions",
          generalEquipPriority: "// Case 1: General equip priority (Equip status ‚Üí UI_Order ‚Üí Inventory order)",
          slotIndexPriority: "// Case 2: Slot index priority (Dual weapons, etc.)",
          highIndexPriority: "// Higher index priority",
          problemTitle: "üîé Problem (Before)",
          problem1: "‚Ä¢ Repeatedly searching the entire inventory when equipping an item",
          problem2: "‚Ä¢ Redundant implementation of separate comparison functions for different priority rules depending on the situation",
          solutionTitle: "üöÄ Solution (System Design)",
          solution1: "‚Ä¢ Reduced search scope after grouping by item SubType",
          solution2: "‚Ä¢ After primary comparison of combat power, applied dynamic priority by situation using lambda",
          solution3: "‚Ä¢ Handled all situations with a single ComparePriority function (e.g., general equip, dual weapon)",
          resultTitle: "‚úÖ Results (After)",
          result1: "‚Ä¢ Search cost optimized from O(N) to O(N log N) sorting + single search",
          result2: "‚Ä¢ Code duplication removed ‚Üí all priority rules handled by a single function",
          result3: "‚Ä¢ Ensured extensibility ‚Üí easily add new priority rules with lambda",
          description: "Instead of iterating through the entire inventory every time, search costs were significantly reduced by grouping items and selecting only optimal slots through lambda-based dynamic priority sorting."
        }
      },
      sections: {
        experience: "Experience",
        projects: "Projects",
        skills: "Skills",
        vision: "Vision",
        viewDetails: "View Details"
      },
      contact: {
        title: "Contact",
        email: "Email",
        github: "GitHub"
      },
      vision: {
        description: "Discover the vision and goals as a game developer"
      }
    },
    ko: {
      title: "Î∞ïÏÑ±Ïû¨",
      subtitle: "Í≤åÏûÑ ÌÅ¥ÎùºÏù¥Ïñ∏Ìä∏ Í∞úÎ∞úÏûê",
      description: "C++ÏôÄ Unreal Engine Í∏∞Î∞òÏùò MMORPG ÌÅ¥ÎùºÏù¥Ïñ∏Ìä∏ ÌîÑÎ°úÍ∑∏ÎûòÎ®∏ÏûÖÎãàÎã§.<br/>Ïù∏Î≤§ÌÜ†Î¶¨¬∑Ïû•ÎπÑ¬∑ÌÄµÏä¨Î°Ø Îì± ÌïµÏã¨ Í≤åÏûÑ ÏãúÏä§ÌÖúÍ≥º MVVM Í∏∞Î∞ò UI ÏïÑÌÇ§ÌÖçÏ≤ò ÏÑ§Í≥Ñ¬∑Íµ¨ÌòÑÏóê Ï†ÑÎ¨∏ÏÑ±ÏùÑ Í∞ñÏ∂îÍ≥† ÏûàÏäµÎãàÎã§.",
      projectU: {
        title: "ProjectR - MMORPG ÌÅ¥ÎùºÏù¥Ïñ∏Ìä∏ Í∞úÎ∞ú",
        date: "Í∏∞Í∞Ñ: 2021 ~ ÌòÑÏû¨<br/><br/>",
        desc: "Î≥∏ ÌîÑÎ°úÏ†ùÌä∏Îäî <strong>ÌÅ¨Î°úÏä§ÌîåÎû´Ìèº(PC Î∞è Î™®Î∞îÏùº)</strong> Í∏∞Î∞òÏùò <strong>Î¶¨ÎãàÏßÄ ÎùºÏù¥ÌÅ¨(Lineage-like)</strong> Ïä§ÌÉÄÏùº ÎåÄÍ∑úÎ™® MMORPGÎ°ú, <strong>C++</strong>Í≥º <strong>Unreal Engine 5</strong>Î•º ÌôúÏö©Ìï¥ ÎÜíÏùÄ Í∑∏ÎûòÌîΩ ÌíàÏßàÍ≥º ÏµúÏ†ÅÏùò ÏÑ±Îä• Íµ¨ÌòÑÏùÑ Î™©ÌëúÎ°ú Ìï©ÎãàÎã§.<br/><br/>2022ÎÖÑ 1ÏõîÎ∂ÄÌÑ∞ ÌÅ¥ÎùºÏù¥Ïñ∏Ìä∏ Í∞úÎ∞úÌåÄÏùò ÌåÄÏõêÏúºÎ°ú Ìï©Î•òÌïòÏó¨, <strong>ÏïÑÏù¥ÌÖú ÏãúÏä§ÌÖú</strong>, <strong>UI/UX</strong>, <strong>ÏãúÏä§ÌÖú ÏïÑÌÇ§ÌÖçÏ≤ò</strong> ÏÑ§Í≥Ñ Î∞è ÏµúÏ†ÅÌôî Îì± Í≤åÏûÑÏùò ÌïµÏã¨Ï†ÅÏù∏ Î∂ÄÎ∂ÑÎì§ÏùÑ Îã¥ÎãπÌïòÍ≥† ÏûàÏäµÎãàÎã§. <strong>World Partition</strong>, <strong>Nanite</strong>, <strong>Gameplay Ability System(GAS)</strong> Îì± Ïñ∏Î¶¨Ïñº ÏóîÏßÑ 5Ïùò ÏµúÏã† Í∏∞Ïà†ÏùÑ Ï†ÅÍ∑πÏ†ÅÏúºÎ°ú ÌôúÏö©ÌïòÍ≥† ÏûàÏúºÎ©∞, UI Í∞úÎ∞úÏóêÎäî <strong>MVVM(Model-View-ViewModel)</strong> ÏïÑÌÇ§ÌÖçÏ≤òÎ•º ÎèÑÏûÖÌïòÏó¨ ÏΩîÎìúÏùò Ïû¨ÏÇ¨Ïö©ÏÑ±Í≥º Ïú†ÏßÄÎ≥¥ÏàòÏÑ±ÏùÑ ÎÜíÏòÄÏäµÎãàÎã§.<br/><br/>ÌòÑÏû¨ Ï∂úÏãú ÎØ∏Ï†ïÏù∏ ÎπÑÍ≥µÍ∞ú ÌîÑÎ°úÏ†ùÌä∏Îùº Ï£ºÏöî ÎÇ¥Ïö©ÏùÄ ÌÖçÏä§Ìä∏ Ï§ëÏã¨ÏúºÎ°ú Íµ¨ÏÑ±ÌñàÏäµÎãàÎã§.",
        tags: ["C++", "Unreal Engine 5", "MVVM", "ÎÑ§Ìä∏ÏõåÌÅ¨ ÌîÑÎ°úÍ∑∏ÎûòÎ∞ç", "MMORPG"],
        role: "Ïñ∏Î¶¨Ïñº ÌÅ¥ÎùºÏù¥Ïñ∏Ìä∏ ÌîÑÎ°úÍ∑∏ÎûòÎ®∏",
        teamSize: "100+ Í∞úÎ∞úÏûê",
        platforms: ["PC", "Î™®Î∞îÏùº"]
      },
      technicalHighlights: {
        title: "Í∏∞Ïà†Ï†Å ÌïòÏù¥ÎùºÏù¥Ìä∏",
        architecture: {
          title: "MVVM ÏïÑÌÇ§ÌÖçÏ≤ò",
          desc: "13Í∞ú Ï£ºÏöî Í≤åÏûÑ ÏãúÏä§ÌÖúÏùò MVVM ÏïÑÌÇ§ÌÖçÏ≤ò Íµ¨ÌòÑÍ≥º Model-View Î∂ÑÎ¶¨,<br/>Îç∏Î¶¨Í≤åÏù¥Ìä∏ Í∏∞Î∞ò Ïù¥Î≤§Ìä∏ Ìï∏Îì§ÎßÅÏùÑ ÌÜµÌïú ÌôïÏû• Í∞ÄÎä•Ìïú UI ÏãúÏä§ÌÖú Íµ¨Ï∂ï"
        },
        performance: {
          title: "ÏÑ±Îä• ÏµúÏ†ÅÌôî",
          desc: "CMSG/CUP Ìå®ÌÇ∑ ÏãúÏä§ÌÖú, FieldNotifyÎ•º ÌÜµÌïú Ìö®Ïú®Ï†ÅÏù∏ UI ÏóÖÎç∞Ïù¥Ìä∏,<br/>100Î™Ö Ïù¥ÏÉÅ ÎèôÏãú Ï†ëÏÜçÏûê Ïã§ÏãúÍ∞Ñ Îç∞Ïù¥ÌÑ∞ ÎèôÍ∏∞Ìôî"
        },
        systems: {
          title: "ÌïµÏã¨ Îã¥Îãπ ÏãúÏä§ÌÖú",
          desc: "Ïù∏Î≤§ÌÜ†Î¶¨ Í¥ÄÎ¶¨, Ïû•ÎπÑ/Ïû•Ï∞© ÏãúÏä§ÌÖú, ÌååÌã∞/Ïª§ÎÆ§ÎãàÌã∞ ÏãúÏä§ÌÖú,<br/>ÏÇ¨Îßù/Î∂ÄÌôú Î©îÏª§ÎãàÏ¶òÏùÑ Ìè¨Ìï®Ìïú 13Í∞ú Ïù¥ÏÉÅÏùò ÌïÑÏàò Í≤åÏûÑ ÏãúÏä§ÌÖú Í∞úÎ∞ú"
        }
      },
      contributions: {
        title: "Ï£ºÏöî Í∏∞Ïó¨",
        items: [
          {
            title: "Ïù∏Î≤§ÌÜ†Î¶¨ Í¥ÄÎ¶¨ ÏãúÏä§ÌÖú",
            desc: "UID Í∏∞Î∞ò Îç∞Ïù¥ÌÑ∞ Í¥ÄÎ¶¨, ÌÅ¥ÎùºÏù¥Ïñ∏Ìä∏‚ÄìÏÑúÎ≤Ñ ÎèôÍ∏∞Ìôî, ÏïÑÏù¥ÌÖú ÎèôÏûë Î∞è ÏÉÅÌÉú Í∞±Ïã† Î°úÏßÅ Íµ¨ÌòÑ",
            note: "ÏïÑÏù¥ÌÖú ÏÇ¨Ïö©, Ïû•Ï∞©/Ìï¥Ï†ú, Î≥¥Í¥Ä, Ï†ïÎ¶¨, Ï≤òÎ¶¨ Îì± Ï†ÑÏ≤¥ Í∏∞Îä• Íµ¨ÌòÑ"
          },
          {
            title: "UI/UX ÏãúÏä§ÌÖú (MVVM ÏïÑÌÇ§ÌÖçÏ≤ò)",
            desc: "13Í∞ú Ï£ºÏöî Í≤åÏûÑ ÏãúÏä§ÌÖú MVVM Íµ¨ÌòÑ, UI/Î°úÏßÅ ÏôÑÏ†Ñ Î∂ÑÎ¶¨",
            note: "Ïú†ÏßÄÎ≥¥ÏàòÏÑ± Ìñ•ÏÉÅ Î∞è Ïã†Í∑ú Í∏∞Îä• ÌôïÏû• Ïö©Ïù¥"
          },
          {
            title: "Î©ÄÌã∞ÌîåÎ†àÏù¥Ïñ¥ ÏÉÅÌò∏ÏûëÏö© ÏãúÏä§ÌÖú (ÌååÌã∞¬∑Ïª§ÎÆ§ÎãàÌã∞)",
            desc: "ÏÑúÎ≤Ñ Îç∞Ïù¥ÌÑ∞ Íµ¨Ï°∞Ìôî ‚Üí HUD/ÎØ∏ÎãàÎßµ/Ï∫êÎ¶≠ÌÑ∞ ÌÉúÍ∑∏ Î∞òÏòÅ",
            note: "Îã§Ï§ë Ïú†Ï†Ä Í∞Ñ ÌòëÎ†•¬∑ÏÜåÌÜµ Í∏∞Îä• Ï†úÍ≥µ"
          },
          {
            title: "ÎÑ§Ìä∏ÏõåÌÅ¨ ÏµúÏ†ÅÌôî ÏãúÏä§ÌÖú (Ïø®ÌÉÄÏûÑ ÎèôÍ∏∞Ìôî)",
            desc: "ÏÑúÎ≤Ñ ÌÉÄÏûÑÏä§ÌÉ¨ÌîÑ Í∏∞Î∞ò Ïã§ÏãúÍ∞Ñ Ïø®ÌÉÄÏûÑ ÎèôÍ∏∞Ìôî",
            note: "ÌÅ¥ÎùºÏù¥Ïñ∏Ìä∏ Í∞Ñ ÏãúÍ∞Ñ Î∂àÏùºÏπò Î¨∏Ï†ú Ìï¥Í≤∞"
          }
        ]
      },
      performanceOptimization: {
        summaryTitle: "üìä ÏÑ±Îä• ÏµúÏ†ÅÌôî ÌïµÏã¨ ÏöîÏïΩ",
        filtering: {
          title: "ÌïÑÌÑ∞ÎßÅ:",
          desc: "BitMask ÏïïÏ∂ï ¬∑ O(1) ÌåêÏ†ï ¬∑ Ï°∞Í±¥ ÌÜµÌï© Í¥ÄÎ¶¨"
        },
        icon: {
          title: "ÏïÑÏù¥ÏΩò:",
          desc: "ÏÜçÏÑ± Ï∫êÏã± + Ïä¨Î°Ø Îç∏ÌÉÄ Í∞±Ïã†ÏúºÎ°ú Î∂àÌïÑÏöî Ïû¨ÏÉùÏÑ± ‚Üì"
        },
        inventory: {
          title: "Ïù∏Î≤§ÌÜ†Î¶¨:",
          desc: "Observer + FieldNotifyÎ°ú Ïù¥Î≤§Ìä∏ Í∏∞Î∞ò UI ÎèôÍ∏∞Ìôî"
        },
        search: {
          title: "ÌÉêÏÉâ:",
          desc: "Í∑∏Î£πÌôî + Îã§Ï∏µ Ï†ïÎ†¨Î°ú O(N) ‚Üí O(N log N) ÏµúÏ†ÅÌôî"
        }
      },
      accordionItems: {
        bitmask: {
          title: "üîç BitMask Í∏∞Î∞ò O(1) ÌïÑÌÑ∞ÎßÅ ÏãúÏä§ÌÖú",
          badge: "ÎπÑÌä∏ Îã®ÏúÑ ÏïïÏ∂ï Í¥ÄÎ¶¨",
          preview: "ÌïòÎÇòÏùò Ï†ïÏàòÎ•º ÎπÑÌä∏ ÏòÅÏó≠ Î∂ÑÌï†ÌïòÏó¨ Îì±Î°ù/Ï†úÏô∏ Ï°∞Í±¥ÏùÑ ÌÜµÌï© Í¥ÄÎ¶¨ÌïòÎäî ÌïÑÌÑ∞ÎßÅ ÏãúÏä§ÌÖú"
        },
        unifiedSlot: {
          title: "üí° ÌÜµÌï© Ïä¨Î°Ø Î≤†Ïù¥Ïä§ ÏãúÏä§ÌÖú (Unified Slot Base System)",
          badge: "ÏΩîÎìú Ï§ëÎ≥µ ‚Üì",
          preview: "Ïä¨Î°Ø ÏãúÏä§ÌÖúÏùÑ ÌÜµÌï© Î≤†Ïù¥Ïä§ ÏïÑÌÇ§ÌÖçÏ≤ò(UBaseSlot)Î°ú ÏÑ§Í≥ÑÌï¥, UI Ïª¥Ìè¨ÎÑåÌä∏ ÏûêÎèô Îì±Î°ùÍ≥º Îç∏ÌÉÄ ÏóÖÎç∞Ïù¥Ìä∏Î•º Ï†ÅÏö©Ìïú ÏãúÏä§ÌÖú"
        },
        inventoryObserver: {
          title: "üìù Ïù∏Î≤§ÌÜ†Î¶¨ Ïù∏ÌÑ∞ÌéòÏù¥Ïä§ (Observer)",
          badge: "UI ÏóÖÎç∞Ïù¥Ìä∏ Ìò∏Ï∂ú -35%",
          preview: "Î™®Îç∏ Îç∏Î¶¨Í≤åÏù¥Ìä∏ Íµ¨ÎèÖ ‚Üí ViewModel FieldNotify ‚Üí UI ÏûêÎèô ÎèôÍ∏∞Ìôî"
        },
        prioritySearch: {
          title: "‚ö° Ïö∞ÏÑ†ÏàúÏúÑ Í∏∞Î∞ò ÌÉêÏÉâ ÏµúÏ†ÅÌôî (ÏûêÎèô Ïû•Ï∞©)",
          badge: "ÌÉêÏÉâ ÎπÑÏö© O(N) ‚Üí O(N log N)",
          preview: "Ïù∏Î≤§ÌÜ†Î¶¨ Ï†ÑÏ≤¥Î•º Îß§Î≤à ÏàúÌöåÌïòÎäî ÎåÄÏã†, ÏïÑÏù¥ÌÖúÏùÑ Í∑∏Î£πÌôîÌïòÍ≥† ÎûåÎã§ Í∏∞Î∞ò ÎèôÏ†Å Ïö∞ÏÑ†ÏàúÏúÑ Ï†ïÎ†¨Î°ú ÏµúÏ†Å Ïä¨Î°ØÎßå ÏÑ†ÌÉùÌïòÎäî Î∞©ÏãùÏúºÎ°ú ÌÉêÏÉâ ÎπÑÏö©ÏùÑ ÌÅ¨Í≤å Ï§ÑÏòÄÏäµÎãàÎã§."
        }
      },
      bitMaskDetails: {
        bitDivision: "ÎπÑÌä∏ ÏòÅÏó≠ Î∂ÑÌï†: Îì±Î°ù Ï°∞Í±¥(0~15bit)Í≥º Ï†úÏô∏ Ï°∞Í±¥(16~31bit)ÏùÑ ÌïòÎÇòÏùò Ï†ïÏàòÎ°ú ÌÜµÌï©",
        o1Filtering: "O(1) ÌïÑÌÑ∞ÎßÅ: ÎπÑÌä∏ Ïó∞ÏÇ∞ÏúºÎ°ú Î≥µÏû°Ìïú if-else Î°úÏßÅÏùÑ Îã®ÏàúÌôî",
        scalableDesign: "ÌôïÏû• Í∞ÄÎä•Ìïú ÏÑ§Í≥Ñ: ÏÉàÎ°úÏö¥ ÌïÑÌÑ∞ Ï°∞Í±¥ Ï∂îÍ∞Ä Ïãú ÎπÑÌä∏Îßå Ìï†Îãπ",
        innovativeArchitecture: "ÌïòÎÇòÏùò Ï†ïÏàòÎ°ú Î∞òÎåÄÎêòÎäî Îëê Í∞úÎÖê(Îì±Î°ù/Ï†úÏô∏)ÏùÑ ÎÖºÎ¶¨Ï†ÅÏúºÎ°ú Î∂ÑÎ¶¨ÌïòÏó¨ Í¥ÄÎ¶¨ÌïòÎäî ÌòÅÏã†Ï†Å ÏïÑÌÇ§ÌÖçÏ≤ò",
        quote: "ÌïòÎÇòÏùò int32Î•º 0~15bit(Îì±Î°ù), 16~31bit(Ï†úÏô∏)Î°ú Î∂ÑÌï†ÌïòÏó¨ Î≥µÏû°Ìïú ÌïÑÌÑ∞ÎßÅÏùÑ Îã®ÏàúÌïú ÎπÑÌä∏ Ïó∞ÏÇ∞ÏúºÎ°ú Ìï¥Í≤∞"
      },
      sections: {
        experience: "Í≤ΩÎ†•",
        projects: "ÌîÑÎ°úÏ†ùÌä∏",
        skills: "ÏÜåÌÜµ/ÌòëÏóÖ",
        vision: "ÎπÑÏ†Ñ",
        viewDetails: "ÏûêÏÑ∏Ìûà Î≥¥Í∏∞"
      },
      contact: {
        title: "Ïó∞ÎùΩÏ≤ò",
        email: "Ïù¥Î©îÏùº",
        github: "ÍπÉÌóàÎ∏å"
      },
      vision: {
        description: "Í≤åÏûÑ Í∞úÎ∞úÏûêÎ°úÏÑúÏùò ÎπÑÏ†ÑÍ≥º Î™©ÌëúÎ•º ÏïåÏïÑÎ≥¥ÏÑ∏Ïöî"
      },
      codeComments: {
        model: "// Model: ÌååÌã∞ Îç∞Ïù¥ÌÑ∞ÏôÄ ÏÑúÎ≤Ñ ÌÜµÏã†",
        viewModel: "// ViewModel: UIÏôÄ Model Ïó∞Í≤∞, FieldNotifyÎ°ú ÏûêÎèô ÏóÖÎç∞Ïù¥Ìä∏",
        private: "// Private:",
        members: "// Members:",
        delegate: "// Delegate:",
        updateMember: "// ÏÑúÎ≤ÑÏóêÏÑú ÌååÌã∞Ïõê Ï†ïÎ≥¥ ÏóÖÎç∞Ïù¥Ìä∏ Ïãú Ìò∏Ï∂ú",
        onPartyChanged: "// ÌååÌã∞Ïõê ÏÉÅÌÉú Î≥ÄÍ≤Ω Ïãú Ìò∏Ï∂ú (Í∏ÄÎ°úÎ≤å ModelÏóêÏÑú)",
        fieldNotify: "// FieldNotifyÎ°ú UI ÏûêÎèô Í∞±Ïã†",
        etc: "etc...",
        bitmask: {
          enumDefinition: "// BitMask ÌÜµÌï© ÌïÑÌÑ∞ ÏãúÏä§ÌÖú - Îì±Î°ù Ï°∞Í±¥(0~15bit)Í≥º Ï†úÏô∏ Ï°∞Í±¥(16~31bit)",
          registrationConditions: "// Îì±Î°ù Ï°∞Í±¥ (0~15 bit)",
          exclusionConditions: "// Ï†úÏô∏ Ï°∞Í±¥ (16~31 bit)",
          gradeNormal: "Grade_Normal = 1 << 0,    // ÏùºÎ∞ò Îì±Í∏â ÏïÑÏù¥ÌÖú",
          gradeGoodly: "Grade_Goodly = 1 << 1,   // Ï¢ãÏùÄ Îì±Í∏â ÏïÑÏù¥ÌÖú",
          gradeRare: "Grade_Rare = 1 << 2,      // Î†àÏñ¥ Îì±Í∏â ÏïÑÏù¥ÌÖú",
          gradeEpic: "Grade_Epic = 1 << 3,      // ÏóêÌîΩ Îì±Í∏â ÏïÑÏù¥ÌÖú",
          gradeLegendary: "Grade_Legendary = 1 << 4, // Ï†ÑÏÑ§ Îì±Í∏â ÏïÑÏù¥ÌÖú",
          excludeStartBit: "ExcludeStartBit = 1 << 16, // Ï†úÏô∏ Ï°∞Í±¥ ÏãúÏûë ÎπÑÌä∏",
          pvpMode: "PvP_Mode = 1 << 17,         // PvP Î™®Îìú Ï†úÏô∏",
          tradeDisabled: "Trade_Disabled = 1 << 18, // Í±∞Îûò Î∂àÍ∞Ä Ï†úÏô∏",
          usage: "// ÏÇ¨Ïö© ÏòàÏãú",
          filterExample: "int32_t filter = Grade_Goodly | Grade_Rare; // Îì±Î°ù: Ï¢ãÏùÄ Îì±Í∏âÍ≥º Î†àÏñ¥ Îì±Í∏â",
          exclusionExample: "int32_t exclusion = PvP_Mode; // Ï†úÏô∏: PvP Î™®Îìú",
          resultExample: "bool result = (filter & target) && !(exclusion & target); // O(1) ÌïÑÌÑ∞ÎßÅ Í≤∞Í≥º",
          visibleMaskComment: "// VisibleMask: Í∞Å Ïª®ÌÖêÏ∏† Ï†ÑÏ≤¥ Ï†ÅÏö© ÎåÄÏÉÅ ÌïÑÌÑ∞ ÎßàÏä§ÌÅ¨",
          activeMaskComment: "// ActiveMask: Ïª®ÌÖêÏ∏† ÌôúÏÑ±Ìôî ÏÉÅÌÉúÏùò ÌïÑÌÑ∞ ÎßàÏä§ÌÅ¨",
          excludeCheckComment: "// Ï†úÏô∏ Ï°∞Í±¥ Î®ºÏ†Ä Ï≤¥ÌÅ¨ (16~31 bit)",
          registrationCheckComment: "// Îì±Î°ù Ï°∞Í±¥ Ï≤¥ÌÅ¨ (0~15 bit)"
        },
        unifiedSlot: {
          baseClass: "// ÌÜµÌï© Ïä¨Î°Ø Î≤†Ïù¥Ïä§ ÏãúÏä§ÌÖú - ÏûêÎèô UI Îì±Î°ùÍ≥º Îç∏ÌÉÄ ÏóÖÎç∞Ïù¥Ìä∏",
          nativeConstruct: "// ÏûêÎèô UI Îì±Î°ù",
          updateSlotDelta: "// Îç∏ÌÉÄ ÏóÖÎç∞Ïù¥Ìä∏ - Î≥ÄÍ≤ΩÎêú Ïä¨Î°ØÎßå ÏóÖÎç∞Ïù¥Ìä∏",
          registerComponents: "// ÏûêÎèô UI Ïª¥Ìè¨ÎÑåÌä∏ Îì±Î°ù",
          bindEvents: "// Ïù¥Î≤§Ìä∏ Î∞îÏù∏Îî©",
          refreshUI: "// UI Í∞±Ïã† - Î≥ÄÍ≤ΩÎêú Î∂ÄÎ∂ÑÎßå ÏóÖÎç∞Ïù¥Ìä∏",
          inventorySlot: "// Ïù∏Î≤§ÌÜ†Î¶¨ Ïä¨Î°Ø Íµ¨ÌòÑ - UBaseSlotÏùò Î™®Îì† Í∏∞Îä•ÏùÑ ÏÉÅÏÜçÎ∞õÏùå",
          widgetTypeAccess: "// ÏúÑÏ†Ø ÌÉÄÏûÖÎ≥Ñ O(1) Ï†ëÍ∑º",
          enumExtension: "// ÏÉàÎ°úÏö¥ ÏúÑÏ†Ø ÌÉÄÏûÖ Ï∂îÍ∞Ä Ïãú EnumÎßå ÌôïÏû•",
          inheritanceStructure: "// ÏÉÅÏÜç Íµ¨Ï°∞",
          itemSpecific: "// ÏïÑÏù¥ÌÖú Ï†ÑÏö© Í∏∞Îä•",
          skillSpecific: "// Ïä§ÌÇ¨ Ï†ÑÏö© Í∏∞Îä•",
          buffSpecific: "// Î≤ÑÌîÑ Ï†ÑÏö© Í∏∞Îä•",
          iconConfigData: "// ===== ÏïÑÏù¥ÏΩò ÏÑ§Ï†ï Îç∞Ïù¥ÌÑ∞ =====",
          coreDataStructure: "// ÌïµÏã¨ Îç∞Ïù¥ÌÑ∞ Íµ¨Ï°∞ (UI ÏûêÎèô Ï≤òÎ¶¨Ïùò Í∏∞Î∞ò)",
          usagePurpose: "// ÏïÑÏù¥ÌÖú/Ïä§ÌÇ¨/Î≤ÑÌîÑ Îì± ÏÇ¨Ïö© Î™©Ï†Å",
          uniqueId: "// Í≥†Ïú† Î≤àÌò∏ (ItemId, SkillId, ClassId Îì±)",
          widgetAttributeList: "// ÏúÑÏ†Ø ÏÜçÏÑ± Î¶¨Ïä§Ìä∏: Type + Action + Value Ï°∞Ìï©",
          constructor: "// ÏÉùÏÑ±Ïûê: Scope + UniqueIDÎ°ú Í∏∞Î≥∏ ÏÜçÏÑ± Ï¥àÍ∏∞Ìôî",
          autoGenerate: "// ScopeÏóê Îî∞Îùº Í∏∞Î≥∏ ÏÜçÏÑ± ÏûêÎèô ÏÉùÏÑ±",
          systemDescription: "Ïä¨Î°Ø ÏãúÏä§ÌÖúÏùÑ ÌÜµÌï© Î≤†Ïù¥Ïä§ ÏïÑÌÇ§ÌÖçÏ≤ò(UBaseSlot)Î°ú ÏÑ§Í≥ÑÌï¥, UI Ïª¥Ìè¨ÎÑåÌä∏ ÏûêÎèô Îì±Î°ùÍ≥º Îç∏ÌÉÄ ÏóÖÎç∞Ïù¥Ìä∏Î•º Ï†ÅÏö©ÌñàÏäµÎãàÎã§. Í∑∏ Í≤∞Í≥º Ïä¨Î°Ø UI Ìò∏Ï∂ú ÌöüÏàòÎ•º ~40% Ï§ÑÏòÄÍ≥†, Ïã†Í∑ú ÏÜçÏÑ± Ï∂îÍ∞ÄÎèÑ Enum Ï†ïÏùòÎßåÏúºÎ°ú ÌôïÏû• Í∞ÄÎä•ÌïòÍ≤å ÌïòÏó¨ Ïú†ÏßÄÎ≥¥Ïàò ÎπÑÏö©ÏùÑ ÌÅ¨Í≤å Ï†àÍ∞êÌñàÏäµÎãàÎã§.",
          problemTitle: "üîé Î¨∏Ï†ú (Before)",
          problem1: "‚Ä¢ ÏïÑÏù¥ÏΩò/Ïä¨Î°ØÏù¥ Í∞ÅÍ∞Å Îî∞Î°ú Íµ¨ÌòÑÎèº Ï§ëÎ≥µ ÏΩîÎìúÏôÄ Í¥ÄÎ¶¨ ÎπÑÏö© Ï¶ùÍ∞Ä",
          problem2: "‚Ä¢ ÏÉàÎ°úÏö¥ ÏÜçÏÑ±(Ïòà: Ïø®ÌÉÄÏûÑ, Í∞ïÌôî Îì±) Ï∂îÍ∞Ä Ïãú Î™®Îì† Ïä¨Î°Ø ÌÅ¥ÎûòÏä§ ÏàòÏ†ï ÌïÑÏöî",
          problem3: "‚Ä¢ UI Ï†ÑÏ≤¥Î•º Îß§Î≤à Ïû¨ÎπåÎìú ‚Üí ÌîÑÎ†àÏûÑ ÎìúÎûç, Î©îÎ™®Î¶¨ ÎÇ≠ÎπÑ Î∞úÏÉù",
          solutionTitle: "üöÄ Ìï¥Í≤∞ (System ÏÑ§Í≥Ñ)",
          solution1: "‚Ä¢ ÌÜµÌï© Î≤†Ïù¥Ïä§ ÌÅ¥ÎûòÏä§Î°ú ÏïÑÏù¥ÏΩò UI/ÎèôÏûëÏùÑ ÏùºÏõêÌôî",
          solution2: "‚Ä¢ ÏûêÎèô ÏúÑÏ†Ø Îì±Î°ù ‚Üí EnumÎßå Ï∂îÍ∞ÄÌïòÎ©¥ ÌôïÏû•",
          solution3: "‚Ä¢ Îç∏ÌÉÄ ÏóÖÎç∞Ïù¥Ìä∏ ‚Üí Î≥ÄÍ≤ΩÎêú Ïä¨Î°ØÎßå Í∞±Ïã†",
          solution4: "‚Ä¢ Í≥µÌÜµ Ïù∏ÌÑ∞ÎûôÏÖò Ï†úÍ≥µ ‚Üí ÌÅ¥Î¶≠¬∑Î°±ÌîÑÎ†àÏä§ Ïù¥Î≤§Ìä∏Î•º Î∂ÄÎ™®ÏóêÏÑú Ï†úÍ≥µ, ÏûêÏãùÏùÄ Ïû¨ÏÇ¨Ïö©Îßå",
          resultTitle: "üéØ ÏÑ±Í≥º (After)",
          result1: "‚Ä¢ ÏΩîÎìú Ï§ëÎ≥µ Ï†úÍ±∞ ‚Üí Ïä¨Î°Ø Í¥ÄÎ†® ÏΩîÎìú ‚Üì ÎåÄÌè≠ Í∞êÏÜå",
          result2: "‚Ä¢ ÌôïÏû•ÏÑ± ÌôïÎ≥¥ ‚Üí Ïã†Í∑ú ÏÜçÏÑ± Ï∂îÍ∞Ä Ïãú Enum Ï†ïÏùòÎßåÏúºÎ°ú Ï¶âÏãú Î∞òÏòÅ",
          result3: "‚Ä¢ Î†åÎçîÎßÅ ÎπÑÏö© Ï†àÍ∞ê ‚Üí Ï†ÑÏ≤¥ Ïû¨ÎπåÎìú Ï†úÍ±∞, Ïä¨Î°Ø UI Ìò∏Ï∂ú ÌöüÏàò ‚Üì ÎåÄÌè≠ Í∞êÏÜå",
          result4: "‚Ä¢ Ïú†ÏßÄÎ≥¥Ïàò Ïö©Ïù¥ÏÑ± ‚Üí Î™®Îì† Ïä¨Î°ØÏù¥ UBaseSlot ÌïòÎÇòÎßå ÏÉÅÏÜçÎ∞õÏúºÎØÄÎ°ú ÏàòÏ†ï Î≤îÏúÑ ‚Üì ÏµúÏÜåÌôî",
          otherScopeHandling: "// ... Í∏∞ÌÉÄ Scope Ï≤òÎ¶¨",
          widgetTypeDefinition: "// ÏúÑÏ†Ø ÌÉÄÏûÖ Ï†ïÏùò",
          widgetTypeEnum: "Icon, Grade, Count, CoolTime, Equip, Lock, Reinforce, ToolTip",
          extensible: "// ... ÌôïÏû• Í∞ÄÎä•",
          widgetAttributeUnit: "// ÏúÑÏ†Ø ÏÜçÏÑ± Îã®ÏúÑ",
          widgetType: "// Ïñ¥Îñ§ ÏúÑÏ†ØÏù∏ÏßÄ",
          widgetAction: "// Ïñ¥Îñ§ ÎèôÏûëÏùÑ ÏàòÌñâ Ìï†ÏßÄ (Visibility, ResourcePath, CoolTime Îì±)",
          numericValue: "// ÏàòÏπò Í∞í (Ïòà: Í∞ïÌôî Îã®Í≥Ñ, ÏïÑÏù¥ÌÖú Í∞úÏàò, Îì±Í∏â Í∞í, ÎÇ®ÏùÄ Ïø®ÌÉÄÏûÑ ÏãúÍ∞Ñ Îì±)"
        },
        coreSystems: {
          gameplayTitle: "üéÆ Í≤åÏûÑÌîåÎ†àÏù¥ ÏãúÏä§ÌÖú",
          gameplay1: "‚Ä¢ <strong>Ïù∏Î≤§ÌÜ†Î¶¨&ÏïÑÏù¥ÌÖú ÏãúÏä§ÌÖú</strong>: ÏïÑÏù¥ÌÖú Í¥ÄÎ¶¨, Î∂ÑÌï¥, ÏÇ≠Ï†ú, ÏûÑÏãúÎ≥¥Í¥ÄÌï®",
          gameplay2: "‚Ä¢ <strong>Ïû•Ï∞© ÏãúÏä§ÌÖú</strong>: Î∂ÄÏúÑÎ≥Ñ Îç∞Ïù¥ÌÑ∞ Í¥ÄÎ¶¨, ÎìÄÏñº Î¨¥Í∏∞ Ïä§Ïôë, ÏûêÎèô Ïû•Ï∞©",
          gameplay3: "‚Ä¢ <strong>ÏÇ¨Îßù ÏãúÏä§ÌÖú</strong>: Î≥µÍµ¨/Í∏∞Î°ù/Î≥µÏàò/Ï∂îÏ†Å Îì± ÏÇ¨Îßù Í¥ÄÎ†® ÌÜµÌï© Í¥ÄÎ¶¨",
          gameplay4: "‚Ä¢ <strong>ÎçòÏ†Ñ ÏãúÏä§ÌÖú</strong>: In-Progress-Wait-Out ÏÉÅÌÉú Í∏∞Î∞ò ÎçòÏ†Ñ Í¥ÄÎ¶¨",
          contentTitle: "üè™ Ïª®ÌÖêÏ∏† ÏãúÏä§ÌÖú",
          content1: "‚Ä¢ <strong>NPC ÏÉÅÏ†ê</strong>: ÏïÑÏù¥ÌÖú Í±∞Îûò ÏãúÏä§ÌÖú",
          content2: "‚Ä¢ <strong>ÌîÑÎ¶¨ÏÖã ÏãúÏä§ÌÖú</strong>: ÏÑ§Ï†ï Ï†ÄÏû•/Î∂àÎü¨Ïò§Í∏∞",
          content3: "‚Ä¢ <strong>Í≤åÏûÑ Ïù¥Î≤§Ìä∏</strong>: ÎàÑÏ†Å Ï†ëÏÜç Î≥¥ÏÉÅ",
          content4: "‚Ä¢ <strong>Ïô∏Ìòï ÏãúÏä§ÌÖú</strong>: Ï∫êÎ¶≠ÌÑ∞ Ïª§Ïä§ÌÑ∞ÎßàÏù¥Ïßï",
          techTitle: "üîß Í∏∞Ïà† ÏãúÏä§ÌÖú",
          tech1: "‚Ä¢ <strong>ÌÜ†Ïä§Ìä∏ ÌåùÏóÖ</strong>: ÏÇ¨Ïö©Ïûê ÏïåÎ¶º ÏãúÏä§ÌÖú",
          tech2: "‚Ä¢ <strong>ÏπòÌä∏ÌÇ§ ÏãúÏä§ÌÖú</strong>: Í∞úÎ∞ú/ÌÖåÏä§Ìä∏ ÏßÄÏõê",
          tech3: "‚Ä¢ <strong>Ïû¨Ìôî Í¥ÄÎ¶¨</strong>: Í≥®Îìú, Îã§Ïù¥ÏïÑ Îì±",
          tech4: "‚Ä¢ <strong>Ïª§ÎÆ§ÎãàÌã∞</strong>: Ïú†Ï†ÄÍ∞Ñ Ïª§ÎÆ§ÎãàÌã∞ Í¥ÄÎ¶¨(ÌååÌã∞, ÏπúÍµ¨, Í≤ΩÍ≥ÑÎåÄÏÉÅ Îì±)",
          detailTitle: "üìä Íµ¨ÌòÑ ÏÉÅÏÑ∏ Ï†ïÎ≥¥",
          detail1Label: "Ï¥ù ÏãúÏä§ÌÖú:",
          detail1Value: "13Í∞ú Ï£ºÏöî ÏãúÏä§ÌÖú",
          detail2Label: "Ï¥ù ÌååÏùº:",
          detail2Value: "80+ .h/.cpp ÌååÏùº",
          detail3Label: "ÏïÑÌÇ§ÌÖçÏ≤ò:",
          detail3Value: "MVVM Ìå®ÌÑ¥",
          detail4Label: "ÎÑ§Ìä∏ÏõåÌÅ¨:",
          detail4Value: "CMSG/CUP Í∏∞Î∞ò"
        },
        iconSystem: {
          title: "üèóÔ∏è ÏïÑÏù¥ÏΩò ÏãúÏä§ÌÖú ÏïÑÌÇ§ÌÖçÏ≤ò",
          subtitle: "UBaseSlot ÏïÑÏù¥ÏΩò ÏãúÏä§ÌÖú Í≥ÑÏ∏µ Íµ¨Ï°∞ Îã§Ïù¥Ïñ¥Í∑∏Îû®",
          description: "UBaseSlot Î≤†Ïù¥Ïä§ ÌÅ¥ÎûòÏä§Î•º Ï§ëÏã¨ÏúºÎ°ú Ìïú ÏïÑÏù¥ÏΩò ÏÉÅÏÜç Íµ¨Ï°∞ÏôÄ Îç∞Ïù¥ÌÑ∞ ÌùêÎ¶ÑÏùÑ ÏãúÍ∞ÅÌôîÌïú Îã§Ïù¥Ïñ¥Í∑∏Îû®"
        },
        inventoryObserver: {
          modelClass: "// Ïù∏Î≤§ÌÜ†Î¶¨ Observer Ìå®ÌÑ¥ - ÏûêÎèô UI ÏóÖÎç∞Ïù¥Ìä∏Í∞Ä ÏûàÎäî Î™®Îç∏",
          delegateDeclaration: "// Ïù∏Î≤§ÌÜ†Î¶¨ Î≥ÄÍ≤ΩÏùÑ ÏúÑÌïú Îç∏Î¶¨Í≤åÏù¥Ìä∏ ÏÑ†Ïñ∏",
          updateInventory: "// Ïù∏Î≤§ÌÜ†Î¶¨ Îç∞Ïù¥ÌÑ∞ ÏóÖÎç∞Ïù¥Ìä∏ - ÏûêÎèôÏúºÎ°ú UIÏóê ÏïåÎ¶º",
          viewModelClass: "// ObserverÎ•º Íµ¨ÎèÖÌïòÎäî ViewModel",
          beginPlay: "// Î™®Îç∏ Îç∏Î¶¨Í≤åÏù¥Ìä∏ Íµ¨ÎèÖ",
          handleUpdate: "// FieldNotifyÎ°ú ÏûêÎèô UI ÏóÖÎç∞Ïù¥Ìä∏",
          interfaceAbstract: "Ïù∏ÌÑ∞ÌéòÏù¥Ïä§Î°ú Ïï°ÏÖò(ÏÑ†ÌÉù/Ìï¥Ï†ú/ÌôúÏÑ±)ÏùÑ Ï∂îÏÉÅÌôî",
          observerEvent: "ObserverÎ°ú Î≥ÄÍ≤Ω Ïù¥Î≤§Ìä∏Îßå Ï†ÑÎã¨",
          commandDelegate: "Command-style Îç∏Î¶¨Í≤åÏù¥Ìä∏Î°ú ÏûÖÎ†• ÏùºÏõêÌôî",
          looseCoupling: "ÎäêÏä®Ìïú Í≤∞Ìï©ÏúºÎ°ú ÌôïÏû•ÏÑ±‚Üë, ÏΩîÎìú Ïû¨ÏÇ¨Ïö©ÏÑ±‚Üë, Ïú†ÏßÄÎ≥¥ÏàòÏÑ± Ìñ•ÏÉÅ",
          modelDelegateFlow: "Î™®Îç∏ Îç∏Î¶¨Í≤åÏù¥Ìä∏ Íµ¨ÎèÖ ‚Üí ViewModel FieldNotify ‚Üí UI ÏûêÎèô ÎèôÍ∏∞Ìôî"
        },
        prioritySearch: {
          optimizerClass: "// Ïö∞ÏÑ†ÏàúÏúÑ Í∏∞Î∞ò ÌÉêÏÉâ ÏµúÏ†ÅÌôî - Í∑∏Î£πÌôîÎêú ÏïÑÏù¥ÌÖú ÌÉêÏÉâ",
          findOptimalSlots: "// Í∑∏Î£πÌôîÎêú ÏïÑÏù¥ÌÖú ÌÉêÏÉâ",
          groupItems: "// 1. ÏïÑÏù¥ÌÖú ÌÉÄÏûÖÎ≥Ñ Í∑∏Î£πÌôî",
          priorityFunction: "// 2. ÎûåÎã§ Í∏∞Î∞ò ÎèôÏ†Å Ïö∞ÏÑ†ÏàúÏúÑ Ï†ïÎ†¨",
          multiLayerSort: "// 3. Îã§Ï∏µ Ï†ïÎ†¨ Ï†ÅÏö©",
          selectTopSlots: "// 4. ÏµúÏ†Å Ïä¨Î°ØÎßå ÏÑ†ÌÉù (O(N log N))",
          groupByType: "// ÏïÑÏù¥ÌÖú ÌÉÄÏûÖÎ≥Ñ Í∑∏Î£πÌôî",
          calculatePriority: "// ÎèôÏ†Å Ïö∞ÏÑ†ÏàúÏúÑ Í≥ÑÏÇ∞",
          itemRarity: "// ÏïÑÏù¥ÌÖú Îì±Í∏â Ïö∞ÏÑ†ÏàúÏúÑ",
          playerLevel: "// ÌîåÎ†àÏù¥Ïñ¥ Î†àÎ≤® Ï†ÅÌï©ÏÑ±",
          itemCondition: "// ÏïÑÏù¥ÌÖú ÏÉÅÌÉú (ÎÇ¥Íµ¨ÎèÑ, Í∞ïÌôî Îì±)",
          coreOptimizationPoint: "// ===== ÌïµÏã¨ ÏµúÏ†ÅÌôî Ìè¨Ïù∏Ìä∏ =====",
          beforeOptimization: "// Before: O(N) - Î™®Îì† Ïù∏Î≤§ÌÜ†Î¶¨ ÏàúÌöå",
          afterOptimization: "// After: O(N log N) - Í∑∏Î£πÌôî + Ï†ïÎ†¨ + Îã®Ïùº ÌÉêÏÉâ",
          lambdaPriority: "// ÌïµÏã¨: ÎûåÎã§ Í∏∞Î∞ò ÎèôÏ†Å Ïö∞ÏÑ†ÏàúÏúÑ Ï†ÅÏö©",
          powerComparison: "// 1Ï∞®: Ï†ÑÌà¨Î†• ÎπÑÍµê",
          situationalPriority: "// 2Ï∞®: Ï†ÑÌà¨Î†•Ïù¥ Í∞ôÏúºÎ©¥ ÎûåÎã§Î°ú ÏÉÅÌô©Î≥Ñ Ïö∞ÏÑ†ÏàúÏúÑ Ï†ÅÏö©",
          situationalLambda: "// ÏÉÅÌô©Î≥Ñ ÎûåÎã§ Ïö∞ÏÑ†ÏàúÏúÑ Ìï®ÏàòÎì§",
          generalEquipPriority: "// Case 1: ÏùºÎ∞ò Ïû•Ï∞© Ïö∞ÏÑ†ÏàúÏúÑ (Ïû•Ï∞©ÏÉÅÌÉú ‚Üí UI_Order ‚Üí Ïù∏Î≤§ÌÜ†Î¶¨ÏàúÏÑú)",
          slotIndexPriority: "// Case 2: Ïä¨Î°Ø Ïù∏Îç±Ïä§ Ïö∞ÏÑ†ÏàúÏúÑ (ÎìÄÏñº Ïõ®Ìè∞ Îì±)",
          highIndexPriority: "// ÎÜíÏùÄ Ïù∏Îç±Ïä§ Ïö∞ÏÑ†",
          problemTitle: "üîé Î¨∏Ï†ú (Before)",
          problem1: "‚Ä¢ ÏïÑÏù¥ÌÖú Ïû•Ï∞© Ïãú Î™®Îì† Ïù∏Î≤§ÌÜ†Î¶¨Î•º Î∞òÎ≥µ ÌÉêÏÉâ",
          problem2: "‚Ä¢ ÏÉÅÌô©Î≥ÑÎ°ú Îã§Î•∏ Ïö∞ÏÑ†ÏàúÏúÑ Í∑úÏπôÏùÑ ÏúÑÌï¥ Î≥ÑÎèÑ ÎπÑÍµê Ìï®ÏàòÎì§ Ï§ëÎ≥µ Íµ¨ÌòÑ",
          solutionTitle: "üöÄ Ìï¥Í≤∞ (System ÏÑ§Í≥Ñ)",
          solution1: "‚Ä¢ ÏïÑÏù¥ÌÖú SubType Í∏∞Ï§ÄÏúºÎ°ú Í∑∏Î£πÌôî ÌõÑ ÌÉêÏÉâ Î≤îÏúÑ Ï∂ïÏÜå",
          solution2: "‚Ä¢ Ï†ÑÌà¨Î†• 1Ï∞® ÎπÑÍµê ÌõÑ, ÎûåÎã§Î°ú ÏÉÅÌô©Î≥Ñ ÎèôÏ†Å Ïö∞ÏÑ†ÏàúÏúÑ Ï†ÅÏö©",
          solution3: "‚Ä¢ ÌïòÎÇòÏùò ComparePriority Ìï®ÏàòÎ°ú Î™®Îì† ÏÉÅÌô© Ï≤òÎ¶¨ (ÏùºÎ∞ò Ïû•Ï∞©, ÎìÄÏñº Ïõ®Ìè∞ Îì±)",
          resultTitle: "‚úÖ ÏÑ±Í≥º (After)",
          result1: "‚Ä¢ ÌÉêÏÉâ ÎπÑÏö© O(N) ‚Üí O(N log N) Ï†ïÎ†¨ + Îã®Ïùº ÌÉêÏÉâÏúºÎ°ú ÏµúÏ†ÅÌôî",
          result2: "‚Ä¢ ÏΩîÎìú Ï§ëÎ≥µ Ï†úÍ±∞ ‚Üí ÌïòÎÇòÏùò Ìï®ÏàòÎ°ú Î™®Îì† Ïö∞ÏÑ†ÏàúÏúÑ Í∑úÏπô Ï≤òÎ¶¨",
          result3: "‚Ä¢ ÌôïÏû•ÏÑ± ÌôïÎ≥¥ ‚Üí ÏÉàÎ°úÏö¥ Ïö∞ÏÑ†ÏàúÏúÑ Í∑úÏπôÏùÑ ÎûåÎã§Î°ú ÏâΩÍ≤å Ï∂îÍ∞Ä",
          description: "Ïù∏Î≤§ÌÜ†Î¶¨ Ï†ÑÏ≤¥Î•º Îß§Î≤à ÏàúÌöåÌïòÎäî ÎåÄÏã†, ÏïÑÏù¥ÌÖúÏùÑ Í∑∏Î£πÌôîÌïòÍ≥† ÎûåÎã§ Í∏∞Î∞ò ÎèôÏ†Å Ïö∞ÏÑ†ÏàúÏúÑ Ï†ïÎ†¨Î°ú ÏµúÏ†Å Ïä¨Î°ØÎßå ÏÑ†ÌÉùÌïòÎäî Î∞©ÏãùÏúºÎ°ú ÌÉêÏÉâ ÎπÑÏö©ÏùÑ ÌÅ¨Í≤å Ï§ÑÏòÄÏäµÎãàÎã§."
        }
      }
    }
  };

  const t = content[lang];

  return (
    <div style={{
      background: 'linear-gradient(135deg, #f5f7fa 0%, #c3cfe2 100%)',
      minHeight: '100vh',
      padding: '20px'
    }}>
      {/* Hero Section */}
      <section style={{
        textAlign: 'center',
        marginBottom: '80px',
        padding: '60px 20px',
        background: 'linear-gradient(135deg, #667eea 0%, #764ba2 100%)',
        borderRadius: '30px',
        color: 'white',
        boxShadow: '0 20px 25px -5px rgba(0, 0, 0, 0.1), 0 10px 10px -5px rgba(0, 0, 0, 0.04)'
      }}>
        <h1 className="text-hero-title mb-xs">
          {t.title}
        </h1>
        <h2 className="text-hero-subtitle mb-xs">
          {t.subtitle}
        </h2>
        <p className="text-hero-body" style={{ maxWidth: '800px', margin: '0 auto', marginTop: '24px' }} dangerouslySetInnerHTML={{ __html: t.description }} />
      </section>

      {/* ProjectU Main Card */}
      <section style={{ marginBottom: '80px' }}>
        <div className="w-full min-w-0" style={{
          background: '#ffffff',
          borderRadius: '24px',
          boxShadow: '0 20px 25px -5px rgba(0, 0, 0, 0.1), 0 10px 10px -5px rgba(0, 0, 0, 0.04)',
          overflow: 'hidden',
          maxWidth: 'min(100%, 1200px)',
          margin: '0 auto'
        }}>
          <div style={{ overflow: 'hidden' }}>
            <img
              src="/projectR.jpg"
              alt="ProjectU"
              style={{
                width: '100%',
                height: '500px',
                objectFit: 'cover',
                transition: 'transform 0.5s ease'
              }}
            />
          </div>

          <div style={{ padding: '48px' }}>
            <h3 className="text-section-subtitle mb-xs" style={{ fontSize: '3rem' }}>
              üéÆ {t.projectU.title}
            </h3>
            <p className="text-body mb-xs" style={{ color: '#718096', fontStyle: 'italic', fontSize: '1.4rem' }} dangerouslySetInnerHTML={{ __html: t.projectU.date }} />
            <p className="text-body mb-md" style={{ color: '#2d3748', fontSize: '1.8rem', lineHeight: '1.7' }} dangerouslySetInnerHTML={{ __html: t.projectU.desc }} />
            
            {/* Ï£ºÏöî Í∏∞Ïó¨ ÏÑπÏÖò */}
            <div style={{ 
              background: 'linear-gradient(135deg, #f7fafc 0%, #edf2f7 100%)', 
              padding: '32px', 
              borderRadius: '16px',
              marginBottom: '40px',
              border: '1px solid #e2e8f0'
            }}>
              <h4 className="text-subtitle-small mb-xs" style={{ 
                color: '#2d3748', 
                borderLeft: '4px solid #667eea',
                marginBottom: '16px',
                paddingLeft: '12px'
              }}>
                {t.contributions.title}
              </h4>
              <div style={{ display: 'grid', gap: '16px' }}>
                {t.contributions.items.map((item, index) => (
                  <div key={index}>
                    {index > 0 && (
                      <div style={{ 
                        height: '1px', 
                        background: '#e2e8f0', 
                        margin: '20px 0' 
                      }}></div>
                    )}
                    <div style={{ display: 'flex', alignItems: 'flex-start', gap: '12px' }}>
                   <span style={{ 
                     background: '#667eea', 
                     color: 'white', 
                     borderRadius: '50%', 
                     width: '24px', 
                     height: '24px', 
                     display: 'flex', 
                     alignItems: 'center', 
                     justifyContent: 'center',
                     fontSize: '0.8rem',
                     fontWeight: '600',
                     flexShrink: 0,
                     marginTop: '2px'
                    }}>{index + 1}</span>
                   <div style={{ flex: 1 }}>
                     <p className="text-description" style={{ color: '#1a202c', margin: '0 0 8px 0', fontWeight: '700', fontSize: '1.7rem' }}>
                        {item.title}
                     </p>
                     <p className="text-text" style={{ color: '#2d3748', margin: '0 0 8px 0', fontSize: '1.4rem', lineHeight: '1.6' }}>
                        {item.desc}
                     </p>
                     <p className="text-small" style={{ color: '#4a5568', margin: 0, fontStyle: 'italic', fontSize: '1.3rem' }}>
                        {item.note}
                     </p>
                   </div>
                 </div>
                    </div>
                ))}
              </div>
            </div>

                         {/* Project Details */}
             <div style={{ display: 'grid', gridTemplateColumns: 'repeat(auto-fit, minmax(200px, 1fr))', gap: '24px', marginBottom: '40px' }}>
               <div style={{ textAlign: 'center', padding: '24px', background: '#f7fafc', borderRadius: '12px' }}>
                 <h4 style={{ fontSize: '1.4rem', fontWeight: '600', color: '#2d3748', marginBottom: '12px' }}>üë§ Role</h4>
                 <p style={{ color: '#4a5568', fontSize: '1.2rem' }}>{t.projectU.role}</p>
               </div>
               <div style={{ textAlign: 'center', padding: '24px', background: '#f7fafc', borderRadius: '12px' }}>
                 <h4 style={{ fontSize: '1.4rem', fontWeight: '600', color: '#2d3748', marginBottom: '12px' }}>üë• Team Size</h4>
                 <p style={{ color: '#4a5568', fontSize: '1.2rem' }}>{t.projectU.teamSize}</p>
               </div>
               <div style={{ textAlign: 'center', padding: '24px', background: '#f7fafc', borderRadius: '12px' }}>
                 <h4 style={{ fontSize: '1.4rem', fontWeight: '600', color: '#2d3748', marginBottom: '12px' }}>üíª Platforms</h4>
                 <p style={{ color: '#4a5568', fontSize: '1.2rem' }}>{t.projectU.platforms.join(', ')}</p>
               </div>
             </div>

            {/* Tags */}
            <div style={{ display: 'flex', gap: '16px', flexWrap: 'wrap' }}>
              {t.projectU.tags.map((tag, idx) => (
                <span
                  key={idx}
                  style={{
                    background: 'linear-gradient(135deg, #667eea 0%, #764ba2 100%)',
                    color: 'white',
                    padding: '14px 24px',
                    borderRadius: '25px',
                    fontSize: '1.2rem',
                    fontWeight: '600',
                    boxShadow: '0 2px 4px rgba(0,0,0,0.1)'
                  }}
                >
                  {tag}
                </span>
              ))}
            </div>
          </div>
        </div>
      </section>

      {/* Technical Highlights Section */}
      <section aria-label="Technical Highlights" className="px-4 sm:px-6 lg:px-8" style={{ marginBottom: '80px' }}>
        <h2 className="text-title mb-md" style={{
          textAlign: 'left',
          borderLeft: '8px solid #667eea',
          paddingLeft: '20px',
          display: 'inline-block',
          fontSize: '3.2rem',
          marginBottom: '40px'
        }}>
          ‚ö° {t.technicalHighlights.title}
        </h2>
        
        {/* 1 ‚Üí 2 ‚Üí 3 Í≥†Ï†ï Ï†ÑÌôò - ÏôºÏ™ΩÎ∂ÄÌÑ∞ ÏãúÏûë */}
        <div className="grid grid-cols-1 md:grid-cols-2 xl:grid-cols-3 gap-y-6 gap-x-4 sm:gap-x-5 lg:gap-x-6 items-stretch justify-items-start">
          {/* MVVM Architecture */}
          <article className="w-full min-w-0 h-full rounded-2xl border border-zinc-200 bg-white shadow-sm flex flex-col" style={{
            background: '#ffffff',
            borderRadius: '20px',
            padding: '40px',
            boxShadow: '0 10px 15px -3px rgba(0, 0, 0, 0.1), 0 4px 6px -2px rgba(0, 0, 0, 0.05)',
            border: '1px solid #e2e8f0',
            boxSizing: 'border-box',
            overflow: 'hidden'
          }}>
            <h3 className="text-section-subtitle" style={{ marginBottom: '28px', fontSize: '2.2rem' }}>
              üèóÔ∏è {t.technicalHighlights.architecture.title}
            </h3>
            <p className="text-body" style={{ color: '#2d3748', marginBottom: '28px', fontSize: '1.6rem', fontWeight: '500' }} dangerouslySetInnerHTML={{ __html: t.technicalHighlights.architecture.desc }} />
            {/* PCÏôÄ Î™®Î∞îÏùº Î™®ÎëêÏóêÏÑú ÏÑ∏Î°ú Î∞∞Ïπò Ïú†ÏßÄ */}
            <div className="min-w-0 mvvm-architecture-content" style={{ 
              display: 'grid', 
              gap: '16px',
              gridTemplateColumns: '1fr'  // Ìï≠ÏÉÅ 1Ïó¥ (ÏÑ∏Î°ú Î∞∞Ïπò)
            }}>
              <div className="min-w-0">
                <MvvmFlowDiagram />
            </div>
              
              {/* Actual Implementation Code */}
              <div className="min-w-0">
                <CodeCardCollapsible
                  code={`${t.codeComments.model}
class UPartyModel : public UObject
{
private:
    UPROPERTY()
    TMap<uint8, FPartyData> Members;
    
    UPROPERTY()
    FOnPartyChanged OnPartyChanged;
    
    DECLARE_DYNAMIC_MULTICAST_DELEGATE_OneParam(FOnPartyChanged, uint8, Num);

public:
    ${t.codeComments.updateMember}
    void UpdateMember(const FPartyData& NewData)
    {
        if (Members.Contains(NewData.Num))
        {
            Members[NewData.Num] = NewData;
            OnPartyChanged.Broadcast(NewData.Num);
        }
    }
};

${t.codeComments.viewModel}
class UPartyVM : public UMVVMViewModelBase
{
private:
   UPROPERTY(BlueprintReadOnly, FieldNotify, meta = (AllowPrivateAccess = "true"))
    uint8 PartyNum;
    
   UPROPERTY(BlueprintReadOnly, FieldNotify, meta = (AllowPrivateAccess = "true"))
    EPartyState State;

private:
    ${t.codeComments.onPartyChanged}
    void OnPartyChanged(uint8 Num)
    {
        if (Num == PartyNum)
        {
            ${t.codeComments.fieldNotify}
            UE_MVVM_BROADCAST_FIELD_VALUE_CHANGED(GetState);
            UE_MVVM_BROADCAST_FIELD_VALUE_CHANGED(GetStateText);
            ${t.codeComments.etc}
        }
    }
};`}
                  language="cpp"
                  label="C++"
                  title="Party System MVVM Example"
                  collapsedHeight={400}
                />
          </div>
            </div>
          </article>
          
          {/* Performance Optimization */}
                      <article 
              aria-label="Performance Optimization"
              className="w-full min-w-0 h-full rounded-2xl border border-zinc-200 bg-white shadow-sm flex flex-col"
              style={{
            background: '#ffffff',
            borderRadius: '20px',
            padding: '40px',
            boxShadow: '0 10px 15px -3px rgba(0, 0, 0, 0.1), 0 4px 6px -2px rgba(0, 0, 0, 0.05)',
                border: '1px solid #e2e8f0',
                boxSizing: 'border-box',
                overflow: 'hidden'
          }}>
            <h3 className="text-section-subtitle" style={{ marginBottom: '28px' }}>
              üöÄ {t.technicalHighlights.performance.title}
            </h3>
            <p className="text-body" style={{ color: '#2d3748', marginBottom: '28px', fontSize: '1.6rem', fontWeight: '500' }} dangerouslySetInnerHTML={{ __html: t.technicalHighlights.performance.desc }} />
            
            {/* ÏÑ±Îä• ÏµúÏ†ÅÌôî ÌïµÏã¨ ÏöîÏïΩ */}
            <div style={{ 
              background: '#f8fafc', 
              padding: '20px', 
              borderRadius: '16px',
              border: '1px solid #e5e7eb',
              marginBottom: '24px'
            }}>
              <h4 className="text-subtitle-small mb-xs" style={{ color: '#1f2937' }}>
                {t.performanceOptimization.summaryTitle}
              </h4>
              <div style={{ display: 'grid', gap: '24px', gridTemplateColumns: 'repeat(auto-fit, minmax(320px, 1fr))' }}>
                <div style={{ padding: '20px', background: '#f0f9ff', borderRadius: '12px', border: '1px solid #bae6fd' }}>
                  <strong className="text-subtitle-xs" style={{ color: '#0369a1' }}>{t.performanceOptimization.filtering.title}</strong> 
                  <span className="text-text" style={{ color: '#0c4a6e' }}> {t.performanceOptimization.filtering.desc}</span>
                </div>
                <div style={{ padding: '20px', background: '#fef3c7', borderRadius: '12px', border: '1px solid #fbbf24' }}>
                  <strong className="text-subtitle-xs" style={{ color: '#92400e' }}>{t.performanceOptimization.icon.title}</strong> 
                  <span className="text-text" style={{ color: '#78350f' }}>{t.performanceOptimization.icon.desc}</span>
                </div>
                <div style={{ padding: '20px', background: '#ecfdf5', borderRadius: '12px', border: '1px solid #34d399' }}>
                  <strong className="text-subtitle-xs" style={{ color: '#065f46' }}>{t.performanceOptimization.inventory.title}</strong> 
                  <span className="text-text" style={{ color: '#064e3b' }}>{t.performanceOptimization.inventory.desc}</span>
                </div>
                <div style={{ padding: '20px', background: '#f3e8ff', borderRadius: '12px', border: '1px solid #a78bfa' }}>
                  <strong className="text-subtitle-xs" style={{ color: '#6b21a8' }}>{t.performanceOptimization.search.title}</strong> 
                  <span className="text-text" style={{ color: '#581c87' }}>{t.performanceOptimization.search.desc}</span>
                </div>
              </div>
            </div>
            
            {/* Performance Optimization Details */}
            <PerformanceAccordion
              items={[
                {
                  id: "bitmask",
                  title: t.accordionItems.bitmask.title,
                  badge: t.accordionItems.bitmask.badge,
                  preview: t.accordionItems.bitmask.preview,

                                      children: (
                      <>
                        <p className="text-text" style={{ color: '#4b5563', marginBottom: '20px', fontStyle: 'italic', padding: '12px', background: '#f8fafc', borderRadius: '8px' }}>
                          "{t.bitMaskDetails.quote}"
                        </p>
                        <ul className="text-text" style={{ color: '#374151', margin: 0, paddingLeft: '24px', marginBottom: '20px' }}>
                          <li style={{ marginBottom: '8px' }}><strong>{t.bitMaskDetails.bitDivision}</strong></li>
                          <li style={{ marginBottom: '8px' }}><strong>{t.bitMaskDetails.o1Filtering}</strong></li>
                          <li style={{ marginBottom: '8px' }}><strong>{t.bitMaskDetails.scalableDesign}</strong></li>
                        </ul>
                        <div className="text-text" style={{ marginBottom: '16px', padding: '12px', background: '#f0f9ff', borderRadius: '8px', color: '#0c4a6e', border: '1px solid #bae6fd' }}>
                          {t.bitMaskDetails.innovativeArchitecture}
            </div>
                        <CodeCardCollapsible
                          code={`${t.codeComments.bitmask.enumDefinition}
UENUM()
enum class EItemFilterFlag : int32
{
    ${t.codeComments.bitmask.registrationConditions}
    ${t.codeComments.bitmask.gradeNormal}
    ${t.codeComments.bitmask.gradeGoodly}
    ${t.codeComments.bitmask.gradeRare}
    ${t.codeComments.bitmask.gradeEpic}
    ${t.codeComments.bitmask.gradeLegendary}
    
    ${t.codeComments.bitmask.exclusionConditions}
    ${t.codeComments.bitmask.excludeStartBit}
    ${t.codeComments.bitmask.pvpMode}
    ${t.codeComments.bitmask.tradeDisabled}
};
ENUM_CLASS_FLAGS(EItemFilterFlag)

// ${t.codeComments.bitmask.usage}
bool IsItemVisible(const FItemData& Item, EFilterMask VisibleMask, EFilterMask ActiveMask)
{
    ${t.codeComments.bitmask.visibleMaskComment}
    ${t.codeComments.bitmask.activeMaskComment}
    
    ${t.codeComments.bitmask.excludeCheckComment}
    if (ActiveMask & 0xFFFF0000 && IsExcludeMatched(Item, ActiveMask))
        return false;
    
    ${t.codeComments.bitmask.registrationCheckComment}
    return (Item.Grade & VisibleMask & 0xFFFF) && 
           EnumHasAnyFlags(ActiveMask & 0xFFFF, Item.Grade);
}`}
                          language="cpp"
                          title="BitMask Unified Filter System"
                          label="C++"
                          collapsedHeight={120}
                        />
                      </>
                    ),
                },
                {
                  id: "icon",
                  title: t.accordionItems.unifiedSlot.title,
                  badge: t.accordionItems.unifiedSlot.badge,
                  preview: t.accordionItems.unifiedSlot.preview,

                                      children: (
                      <>
                        <p className="text-text" style={{ color: '#4b5563', marginBottom: '20px', fontStyle: 'italic', padding: '12px', background: '#f8fafc', borderRadius: '8px' }}>
                          "{t.codeComments.unifiedSlot.systemDescription}"
                        </p>
                        
                        {/* ${t.codeComments.unifiedSlot.problemTitle} */}
                        <div style={{ marginBottom: '20px', padding: '16px', background: '#fef2f2', borderRadius: '12px', border: '1px solid #fecaca' }}>
                          <h6 className="text-text" style={{ fontWeight: '600', marginBottom: '12px', color: '#dc2626' }}>
                            {t.codeComments.unifiedSlot.problemTitle}
                          </h6>
                          <ul className="text-text" style={{ color: '#991b1b', margin: 0, paddingLeft: '20px' }}>
                            <li style={{ marginBottom: '6px' }}>{t.codeComments.unifiedSlot.problem1}</li>
                            <li style={{ marginBottom: '6px' }}>{t.codeComments.unifiedSlot.problem2}</li>
                            <li style={{ marginBottom: '6px' }}>{t.codeComments.unifiedSlot.problem3}</li>
                          </ul>
          </div>
          
                        {/* ${t.codeComments.unifiedSlot.solutionTitle} */}
                        <div style={{ marginBottom: '20px', padding: '16px', background: '#f0f9ff', borderRadius: '12px', border: '1px solid #bae6fd' }}>
                          <h6 className="text-text" style={{ fontWeight: '600', marginBottom: '12px', color: '#0369a1' }}>
                            {t.codeComments.unifiedSlot.solutionTitle}
                          </h6>
                          <ul className="text-text" style={{ color: '#0c4a6e', margin: 0, paddingLeft: '20px' }}>
                            <li style={{ marginBottom: '6px' }}>{t.codeComments.unifiedSlot.solution1}</li>
                            <li style={{ marginBottom: '6px' }}>{t.codeComments.unifiedSlot.solution2}</li>
                            <li style={{ marginBottom: '6px' }}>{t.codeComments.unifiedSlot.solution3}</li>
                            <li style={{ marginBottom: '6px' }}>{t.codeComments.unifiedSlot.solution4}</li>
                          </ul>
                        </div>

                        {/* ${t.codeComments.unifiedSlot.resultTitle} */}
                        <div style={{ marginBottom: '20px', padding: '16px', background: '#f0fdf4', borderRadius: '12px', border: '1px solid #bbf7d0' }}>
                          <h6 className="text-text" style={{ fontWeight: '600', marginBottom: '12px', color: '#16a34a' }}>
                            {t.codeComments.unifiedSlot.resultTitle}
                          </h6>
                          <ul className="text-text" style={{ color: '#15803d', margin: 0, paddingLeft: '20px' }}>
                            <li style={{ marginBottom: '6px' }}>{t.codeComments.unifiedSlot.result1}</li>
                            <li style={{ marginBottom: '6px' }}>{t.codeComments.unifiedSlot.result2}</li>
                            <li style={{ marginBottom: '6px' }}>{t.codeComments.unifiedSlot.result3}</li>
                            <li style={{ marginBottom: '6px' }}>{t.codeComments.unifiedSlot.result4}</li>
                          </ul>
                        </div>
                        <CodeCardCollapsible
                          code={`${t.codeComments.unifiedSlot.baseClass}
${t.codeComments.unifiedSlot.widgetTypeAccess}
TMap<EWidgetType, UWidget*> WidgetMap;

${t.codeComments.unifiedSlot.updateSlotDelta}
void RefreshComponent(const FWidgetDetails& Details) {
    if (UWidget* Target = WidgetMap.FindRef(Details.Type))
        ApplyAction(Target, Details);
}

${t.codeComments.unifiedSlot.registerComponents}
void RegisterComponents();  ${t.codeComments.unifiedSlot.enumExtension}

${t.codeComments.unifiedSlot.inheritanceStructure}
class UItemSlot : public UBaseSlot;      ${t.codeComments.unifiedSlot.itemSpecific}
class USkillSlot : public UBaseSlot;     ${t.codeComments.unifiedSlot.skillSpecific}
class UBuffSlot : public UBaseSlot;      ${t.codeComments.unifiedSlot.buffSpecific}


${t.codeComments.unifiedSlot.iconConfigData}
${t.codeComments.unifiedSlot.coreDataStructure}
struct FIconAttributes 
{
    ESlotScope Scope;      ${t.codeComments.unifiedSlot.usagePurpose}
    int64 UniqueID;        ${t.codeComments.unifiedSlot.uniqueId}

    ${t.codeComments.unifiedSlot.widgetAttributeList}
    TMap<EWidgetType, FWidgetDetail> Attributes;

    ${t.codeComments.unifiedSlot.constructor}
    FIconAttributes(ESlotScope InScope, int64 InID)
        : Scope(InScope), UniqueID(InID)
    {
        Init();
    }
  
private:
    ${t.codeComments.unifiedSlot.autoGenerate}
    void Init()
    {
        switch (Scope)
        {
            case ESlotScope::ItemNo:          GenerateByItemNo(); break;
            case ESlotScope::InventorySlotNo: GenerateByInventorySlotNo(); break;
            case ESlotScope::SkillNo:         GenerateBySkillNo(); break;
            case ESlotScope::ClassNo:         GenerateByClassNo(); break;
            case ESlotScope::NPCBaseNo:       GenerateByNPCBaseNo(); break;
            ${t.codeComments.unifiedSlot.otherScopeHandling}
        }
    }
};

${t.codeComments.unifiedSlot.widgetTypeDefinition}
enum class EWidgetType : uint8 
{
    ${t.codeComments.unifiedSlot.widgetTypeEnum}
    ${t.codeComments.unifiedSlot.extensible}
};

${t.codeComments.unifiedSlot.widgetAttributeUnit}
struct FWidgetDetail 
{
    EWidgetType Type;       ${t.codeComments.unifiedSlot.widgetType}
    EWidgetAction Action;   ${t.codeComments.unifiedSlot.widgetAction}
    int64 Value;            ${t.codeComments.unifiedSlot.numericValue}
};`}
                          language="cpp"
                          title="Unified Slot Base System Architecture"
                          label="C++"
                          collapsedHeight={200}
                        />

                        {/* üèóÔ∏è ÏïÑÏù¥ÏΩò ÏãúÏä§ÌÖú ÏïÑÌÇ§ÌÖçÏ≤ò */}
                        <div style={{ marginTop: '24px', padding: '20px', background: '#f8fafc', borderRadius: '12px', border: '1px solid #e2e8f0' }}>
                          <h5 style={{ fontSize: '1.1rem', fontWeight: '600', marginBottom: '16px', color: '#374151' }}>
                            {t.codeComments.iconSystem.title}
                          </h5>
                          <div style={{ 
                            textAlign: 'center', 
                            marginBottom: '16px',
                            display: 'flex',
                            justifyContent: 'center',
                            alignItems: 'center'
                          }}>
                            <img 
                              src="/UBaseSlot.jpg" 
                              alt={t.codeComments.iconSystem.subtitle}
                              style={{ 
                                maxWidth: '400px', 
                                width: '100%', 
                                height: 'auto',
                                display: 'block',
                                margin: '0 auto'
                              }}
                            />
                          </div>
                          <p style={{ fontSize: '0.95rem', color: '#6b7280', textAlign: 'center', margin: 0 }}>
                            {t.codeComments.iconSystem.description}
                          </p>
                        </div>
                      </>
                    ),
                },
                {
                  id: "inventory",
                  title: t.accordionItems.inventoryObserver.title,
                  badge: t.accordionItems.inventoryObserver.badge,
                  preview: t.accordionItems.inventoryObserver.preview,

                                      children: (
                      <>
                        <p className="text-text" style={{ color: '#4b5563', marginBottom: '20px', fontStyle: 'italic', padding: '12px', background: '#f8fafc', borderRadius: '8px' }}>
                          "{t.codeComments.inventoryObserver.modelDelegateFlow}"
                        </p>
                        <ul className="text-text" style={{ color: '#374151', margin: 0, paddingLeft: '24px', marginBottom: '20px' }}>
                          <li style={{ marginBottom: '8px' }}><strong>{t.codeComments.inventoryObserver.interfaceAbstract}</strong></li>
                          <li style={{ marginBottom: '8px' }}><strong>{t.codeComments.inventoryObserver.observerEvent}</strong></li>
                          <li style={{ marginBottom: '8px' }}><strong>{t.codeComments.inventoryObserver.commandDelegate}</strong></li>
                        </ul>
                        <div className="text-text" style={{ marginBottom: '16px', padding: '12px', background: '#f0fdf4', borderRadius: '8px', color: '#16a34a', border: '1px solid #bbf7d0' }}>
                          {t.codeComments.inventoryObserver.looseCoupling}
                        </div>
                        <CodeCardCollapsible
                          code={`${t.codeComments.inventoryObserver.modelClass}
class UInventoryModel : public UObject {
  GENERATED_BODY()
  
public:
  ${t.codeComments.inventoryObserver.delegateDeclaration}
  DECLARE_DYNAMIC_MULTICAST_DELEGATE_OneParam(FOnInventoryChanged, const FInventoryData&, NewData);
  
  UPROPERTY(BlueprintAssignable)
  FOnInventoryChanged OnInventoryChanged;
  
  ${t.codeComments.inventoryObserver.updateInventory}
  void UpdateInventory(const FInventoryData& NewData) {
    InventoryData = NewData;
    OnInventoryChanged.Broadcast(NewData);
  }
};

${t.codeComments.inventoryObserver.viewModelClass}
class UInventoryViewModel : public UObject {
  GENERATED_BODY()
  
public:
  virtual void BeginPlay() override {
    Super::BeginPlay();
    ${t.codeComments.inventoryObserver.beginPlay}
    if (InventoryModel) {
      InventoryModel->OnInventoryChanged.AddDynamic(this, &UInventoryViewModel::HandleInventoryUpdate);
    }
  }
  
  ${t.codeComments.inventoryObserver.handleUpdate}
  UFUNCTION()
  void HandleInventoryUpdate(const FInventoryData& NewData) {
    UpdateInventoryUI(NewData);
  }
};`}
                          language="cpp"
                          title="Inventory Observer Pattern Implementation"
                          label="C++"
                          collapsedHeight={120}
                        />
                      </>
                    ),
                },
                {
                  id: "priority-search",
                  title: t.accordionItems.prioritySearch.title,
                  badge: t.accordionItems.prioritySearch.badge,
                  preview: t.accordionItems.prioritySearch.preview,

                  children: (
                    <>
                      <p style={{ color: '#4b5563', fontSize: '1.2rem', lineHeight: '1.6', marginBottom: '20px', fontStyle: 'italic', padding: '12px', background: '#f8fafc', borderRadius: '8px' }}>
                        "{t.codeComments.prioritySearch.description}"
                      </p>

                      {/* ${t.codeComments.prioritySearch.problemTitle} */}
                      <div style={{ marginBottom: '20px', padding: '16px', background: '#fef2f2', borderRadius: '12px', border: '1px solid #fecaca' }}>
                        <h6 className="text-text" style={{ fontWeight: '600', marginBottom: '12px', color: '#dc2626' }}>
                          {t.codeComments.prioritySearch.problemTitle}
                        </h6>
                        <ul className="text-text" style={{ color: '#991b1b', margin: 0, paddingLeft: '20px' }}>
                          <li style={{ marginBottom: '6px' }}>{t.codeComments.prioritySearch.problem1}</li>
                          <li style={{ marginBottom: '6px' }}>{t.codeComments.prioritySearch.problem2}</li>
                        </ul>
                      </div>

                      {/* ${t.codeComments.prioritySearch.solutionTitle} */}
                      <div style={{ marginBottom: '20px', padding: '16px', background: '#f0f9ff', borderRadius: '12px', border: '1px solid #bae6fd' }}>
                        <h6 className="text-text" style={{ fontWeight: '600', marginBottom: '12px', color: '#0369a1' }}>
                          {t.codeComments.prioritySearch.solutionTitle}
                        </h6>
                        <ul className="text-text" style={{ color: '#0c4a6e', margin: 0, paddingLeft: '20px' }}>
                          <li style={{ marginBottom: '6px' }}>{t.codeComments.prioritySearch.solution1}</li>
                          <li style={{ marginBottom: '6px' }}>{t.codeComments.prioritySearch.solution2}</li>
                          <li style={{ marginBottom: '6px' }}>{t.codeComments.prioritySearch.solution3}</li>
                        </ul>
                      </div>

                      {/* ${t.codeComments.prioritySearch.resultTitle} */}
                      <div style={{ marginBottom: '20px', padding: '16px', background: '#f0fdf4', borderRadius: '12px', border: '1px solid #bbf7d0' }}>
                        <h6 className="text-text" style={{ fontWeight: '600', marginBottom: '12px', color: '#16a34a' }}>
                          {t.codeComments.prioritySearch.resultTitle}
                        </h6>
                        <ul className="text-text" style={{ color: '#15803d', margin: 0, paddingLeft: '20px' }}>
                          <li style={{ marginBottom: '6px' }}>{t.codeComments.prioritySearch.result1}</li>
                          <li style={{ marginBottom: '6px' }}>{t.codeComments.prioritySearch.result2}</li>
                          <li style={{ marginBottom: '6px' }}>{t.codeComments.prioritySearch.result3}</li>
                        </ul>
                      </div>

                      <CodeCardCollapsible
                        code={`${t.codeComments.prioritySearch.optimizerClass}
${t.codeComments.prioritySearch.groupItems}
GroupBySubType(InventoryItems);

${t.codeComments.prioritySearch.multiLayerSort}
SortItemsByPriority(CandidateItems);

${t.codeComments.prioritySearch.selectTopSlots}
for (auto& Item : CandidateItems)
{
    if (CheckEquipable(Item))
    {
        Equip(Item);
        break;
    }
}

${t.codeComments.prioritySearch.coreOptimizationPoint}
${t.codeComments.prioritySearch.beforeOptimization}
${t.codeComments.prioritySearch.afterOptimization}

${t.codeComments.prioritySearch.lambdaPriority}
bool ComparePriority(const Item& A, const Item& B, TFunction<bool()> CustomRule)
{
    ${t.codeComments.prioritySearch.powerComparison}
    if (A.Power != B.Power) return A.Power > B.Power;
    ${t.codeComments.prioritySearch.situationalPriority}
    return CustomRule != nullptr ? CustomRule() : false;
}

${t.codeComments.prioritySearch.situationalLambda}
${t.codeComments.prioritySearch.generalEquipPriority}
[A, B, &ItemList]() { return A.IsEquipped > B.IsEquipped || A.UIOrder < B.UIOrder || ItemList.Find(A.Slot) < ItemList.Find(B.Slot); }

${t.codeComments.prioritySearch.slotIndexPriority}
[&SlotA, &SlotB]() { return SlotA.Index > SlotB.Index; ${t.codeComments.prioritySearch.highIndexPriority} }`}
                        language="cpp"
                        title="Priority-Based Search Optimization"
                        label="C++"
                        collapsedHeight={200}
                      />
                    </>
                  ),
                },
              ]}
            />
            

          </article>
          
          {/* Core Systems */}
          <article className="w-full min-w-0 h-full rounded-2xl border border-zinc-200 bg-white shadow-sm flex flex-col" style={{
            background: '#ffffff',
            borderRadius: '20px',
            padding: '40px',
            boxShadow: '0 10px 15px -3px rgba(0, 0, 0, 0.1), 0 4px 6px -2px rgba(0, 0, 0, 0.05)',
            border: '1px solid #e2e8f0',
            boxSizing: 'border-box',
            overflow: 'hidden'
          }}>
            <h3 style={{ fontSize: '2.2rem', fontWeight: '700', marginBottom: '28px', color: '#1a202c' }}>
              ‚öôÔ∏è {t.technicalHighlights.systems.title}
            </h3>
            <p style={{ color: '#2d3748', lineHeight: '1.8', fontSize: '1.6rem', marginBottom: '28px', fontWeight: '500' }} dangerouslySetInnerHTML={{ __html: t.technicalHighlights.systems.desc }} />
            
            {/* Core Systems Grid */}
            <div style={{ display: 'grid', gap: '20px', gridTemplateColumns: 'repeat(auto-fit, minmax(280px, 1fr))' }}>
              
              {/* Gameplay Systems */}
            <div style={{ 
                background: '#f8fafc', 
                padding: '20px', 
              borderRadius: '12px',
                border: '1px solid #e2e8f0' 
              }}>
                <h4 style={{ fontSize: '1.5rem', fontWeight: '600', marginBottom: '16px', color: '#1a202c' }}>
                  {t.codeComments.coreSystems.gameplayTitle}
                </h4>
                <ul style={{ color: '#4a5568', fontSize: '1.5rem', lineHeight: '1.6' }}>
                  <li dangerouslySetInnerHTML={{ __html: t.codeComments.coreSystems.gameplay1 }}></li>
                  <li dangerouslySetInnerHTML={{ __html: t.codeComments.coreSystems.gameplay2 }}></li>
                  <li dangerouslySetInnerHTML={{ __html: t.codeComments.coreSystems.gameplay3 }}></li>
                  <li dangerouslySetInnerHTML={{ __html: t.codeComments.coreSystems.gameplay4 }}></li>
                </ul>
            </div>

              {/* Content Systems */}
              <div style={{ 
                background: '#f8fafc', 
                padding: '20px', 
                borderRadius: '12px', 
                border: '1px solid #e2e8f0' 
              }}>
                <h4 style={{ fontSize: '1.5rem', fontWeight: '600', marginBottom: '16px', color: '#1a202c' }}>
                  {t.codeComments.coreSystems.contentTitle}
                </h4>
                <ul style={{ color: '#4a5568', fontSize: '1.5rem', lineHeight: '1.6' }}>
                  <li dangerouslySetInnerHTML={{ __html: t.codeComments.coreSystems.content1 }}></li>
                  <li dangerouslySetInnerHTML={{ __html: t.codeComments.coreSystems.content2 }}></li>
                  <li dangerouslySetInnerHTML={{ __html: t.codeComments.coreSystems.content3 }}></li>
                  <li dangerouslySetInnerHTML={{ __html: t.codeComments.coreSystems.content4 }}></li>
                </ul>
          </div>

              {/* Technical Systems */}
              <div style={{ 
                background: '#f8fafc', 
                padding: '20px', 
                borderRadius: '12px', 
                border: '1px solid #e2e8f0' 
              }}>
                <h4 style={{ fontSize: '1.5rem', fontWeight: '600', marginBottom: '16px', color: '#1a202c' }}>
                  {t.codeComments.coreSystems.techTitle}
                </h4>
                <ul style={{ color: '#4a5568', fontSize: '1.5rem', lineHeight: '1.6' }}>
                  <li dangerouslySetInnerHTML={{ __html: t.codeComments.coreSystems.tech1 }}></li>
                  <li dangerouslySetInnerHTML={{ __html: t.codeComments.coreSystems.tech2 }}></li>
                  <li dangerouslySetInnerHTML={{ __html: t.codeComments.coreSystems.tech3 }}></li>
                  <li dangerouslySetInnerHTML={{ __html: t.codeComments.coreSystems.tech4 }}></li>
                </ul>
              </div>

            </div>

            {/* Implementation Details */}
            <div style={{ 
              marginTop: '24px', 
              padding: '20px', 
              background: '#f1f5f9', 
              borderRadius: '12px',
              border: '1px solid #cbd5e1'
            }}>
              <h4 style={{ fontSize: '1.1rem', fontWeight: '600', marginBottom: '12px', color: '#1e293b' }}>
                {t.codeComments.coreSystems.detailTitle}
              </h4>
              <div style={{ display: 'grid', gap: '16px', gridTemplateColumns: 'repeat(auto-fit, minmax(200px, 1fr))' }}>
                <div>
                  <strong style={{ color: '#1e293b' }}>{t.codeComments.coreSystems.detail1Label}</strong> {t.codeComments.coreSystems.detail1Value}
                </div>
                <div>
                  <strong style={{ color: '#1e293b' }}>{t.codeComments.coreSystems.detail2Label}</strong> {t.codeComments.coreSystems.detail2Value}
                </div>
                <div>
                  <strong style={{ color: '#1e293b' }}>{t.codeComments.coreSystems.detail3Label}</strong> {t.codeComments.coreSystems.detail3Value}
                </div>
                <div>
                  <strong style={{ color: '#1e293b' }}>{t.codeComments.coreSystems.detail4Label}</strong> {t.codeComments.coreSystems.detail4Value}
                </div>
              </div>
            </div>
          </article>
        </div>
      </section>

      {/* Project Video Section */}
      <section style={{ marginBottom: '80px' }}>
        <h2 style={{
          fontSize: '3.5rem',
          fontWeight: '800',
          marginBottom: '40px',
          color: '#1a202c',
          textAlign: 'center',
          borderLeft: '8px solid #667eea',
          paddingLeft: '20px',
          display: 'inline-block'
        }}>
          {lang === 'ko' ? 'ÌîÑÎ°úÏ†ùÌä∏ ÏòÅÏÉÅ' : 'Project Video'}
        </h2>
        <div style={{
          maxWidth: '1000px',
          margin: '0 auto',
          borderRadius: '20px',
          overflow: 'hidden',
          boxShadow: '0 20px 25px -5px rgba(0, 0, 0, 0.1), 0 10px 10px -5px rgba(0, 0, 0, 0.04)'
        }}>
          <iframe
            width="100%"
            height="600"
            src="https://www.youtube.com/embed/slBGNvYOWIA"
            title="ProjectU Demo Video"
            frameBorder="0"
            allow="accelerometer; autoplay; clipboard-write; encrypted-media; gyroscope; picture-in-picture; web-share"
            allowFullScreen
            style={{
              display: 'block',
              borderRadius: '20px'
            }}
          ></iframe>
        </div>
      </section>

      {/* Navigation Cards */}
      <section style={{ marginBottom: '80px' }}>
        <div className="responsive-grid-navigation">
        <Link to="/contributions" style={{ textDecoration: 'none' }}>
            <div className="mobile-card" style={{
            background: '#ffffff',
            borderRadius: '20px',
            padding: '40px',
            boxShadow: '0 10px 15px -3px rgba(0, 0, 0, 0.1), 0 4px 6px -2px rgba(0, 0, 0, 0.05)',
              border: '1px solid #e2e8f0',
              transition: 'transform 0.2s, box-shadow 0.2s',
            cursor: 'pointer',
              height: '100%',
              width: '100%',
              maxWidth: '100%',
              boxSizing: 'border-box',
              overflow: 'hidden',
              contain: 'layout',
              flexShrink: '1',
              flexGrow: '0'
            }} onMouseEnter={(e) => {
              e.currentTarget.style.transform = 'translateY(-5px)';
              e.currentTarget.style.boxShadow = '0 25px 50px -12px rgba(0, 0, 0, 0.25)';
            }} onMouseLeave={(e) => {
              e.currentTarget.style.transform = 'translateY(0)';
              e.currentTarget.style.boxShadow = '0 10px 15px -3px rgba(0, 0, 0, 0.1), 0 4px 6px -2px rgba(0, 0, 0, 0.05)';
            }}>
              <h3 style={{ fontSize: '2.2rem', fontWeight: '700', marginBottom: '16px', color: '#1a202c' }}>
                üíº {t.sections.experience}
            </h3>
              <p style={{ color: '#4a5568', fontSize: '1.4rem', lineHeight: '1.6', marginBottom: '24px' }}>
                {lang === 'ko' ? 'ÌîÑÎ°úÏ†ùÌä∏ Í≤ΩÌóòÍ≥º Í∏∞Ïà†Ï†Å ÏÑ±Í≥ºÎ•º ÏûêÏÑ∏Ìûà ÏÇ¥Ìé¥Î≥¥ÏÑ∏Ïöî' : 'Explore project experience and technical achievements in detail'}
            </p>
              <div style={{ color: '#667eea', fontSize: '1.4rem', fontWeight: '600' }}>
                {t.sections.viewDetails} ‚Üí
              </div>
          </div>
        </Link>

        <Link to="/interactive-ui" style={{ textDecoration: 'none' }}>
            <div className="mobile-card" style={{
            background: '#ffffff',
            borderRadius: '20px',
            padding: '40px',
            boxShadow: '0 10px 15px -3px rgba(0, 0, 0, 0.1), 0 4px 6px -2px rgba(0, 0, 0, 0.05)',
              border: '1px solid #e2e8f0',
              transition: 'transform 0.2s, box-shadow 0.2s',
            cursor: 'pointer',
              height: '100%',
              width: '100%',
              maxWidth: '100%',
              boxSizing: 'border-box',
              overflow: 'hidden',
              contain: 'layout',
              flexShrink: '1',
              flexGrow: '0'
            }} onMouseEnter={(e) => {
              e.currentTarget.style.transform = 'translateY(-5px)';
              e.currentTarget.style.boxShadow = '0 25px 50px -12px rgba(0, 0, 0, 0.25)';
            }} onMouseLeave={(e) => {
              e.currentTarget.style.transform = 'translateY(0)';
              e.currentTarget.style.boxShadow = '0 10px 15px -3px rgba(0, 0, 0, 0.1), 0 4px 6px -2px rgba(0, 0, 0, 0.05)';
            }}>
              <h3 style={{ fontSize: '2.2rem', fontWeight: '700', marginBottom: '16px', color: '#1a202c' }}>
                üéÆ {t.sections.projects}
            </h3>
              <p style={{ color: '#4a5568', fontSize: '1.4rem', lineHeight: '1.6', marginBottom: '24px' }}>
                {lang === 'ko' ? 'Ïù∏ÌÑ∞ÎûôÌã∞Î∏å UI ÏãúÏä§ÌÖúÍ≥º Í≤åÏûÑÌîåÎ†àÏù¥ Î©îÏª§ÎãàÏ¶òÏùÑ ÌôïÏù∏ÌïòÏÑ∏Ïöî' : 'Check out interactive UI systems and gameplay mechanisms'}
            </p>
              <div style={{ color: '#667eea', fontSize: '1.4rem', fontWeight: '600' }}>
                {t.sections.viewDetails} ‚Üí
              </div>
          </div>
        </Link>

        <Link to="/optimization" style={{ textDecoration: 'none' }}>
            <div className="mobile-card" style={{
            background: '#ffffff',
            borderRadius: '20px',
            padding: '40px',
            boxShadow: '0 10px 15px -3px rgba(0, 0, 0, 0.1), 0 4px 6px -2px rgba(0, 0, 0, 0.05)',
              border: '1px solid #e2e8f0',
              transition: 'transform 0.2s, box-shadow 0.2s',
            cursor: 'pointer',
              height: '100%',
              width: '100%',
              maxWidth: '100%',
              boxSizing: 'border-box',
              overflow: 'hidden',
              contain: 'layout',
              flexShrink: '1',
              flexGrow: '0'
            }} onMouseEnter={(e) => {
              e.currentTarget.style.transform = 'translateY(-5px)';
              e.currentTarget.style.boxShadow = '0 25px 50px -12px rgba(0, 0, 0, 0.25)';
            }} onMouseLeave={(e) => {
              e.currentTarget.style.transform = 'translateY(0)';
              e.currentTarget.style.boxShadow = '0 10px 15px -3px rgba(0, 0, 0, 0.1), 0 4px 6px -2px rgba(0, 0, 0, 0.05)';
            }}>
              <h3 style={{ fontSize: '2.2rem', fontWeight: '700', marginBottom: '16px', color: '#1a202c' }}>
                üîß {t.sections.skills}
            </h3>
              <p style={{ color: '#4a5568', fontSize: '1.4rem', lineHeight: '1.6', marginBottom: '24px' }}>
                {lang === 'ko' ? 'ÏπòÌä∏ÌÇ§ Ìà¥ Í∞úÎ∞ú, ÏóëÏÖÄ Í∏∞Î∞ò ÎèôÏ†Å ÏãúÏä§ÌÖú Îì± ÌåÄ ÌòëÏóÖ ÎèÑÍµ¨Î•º ÌôïÏù∏ÌïòÏÑ∏Ïöî' : 'Check out team collaboration tools including cheat key development and Excel-based dynamic systems'}
            </p>
              <div style={{ color: '#667eea', fontSize: '1.4rem', fontWeight: '600' }}>
                {t.sections.viewDetails} ‚Üí
              </div>
          </div>
        </Link>

          <Link to="/vision" style={{ textDecoration: 'none' }}>
            <div className="mobile-card" style={{
            background: '#ffffff',
            borderRadius: '20px',
            padding: '40px',
            boxShadow: '0 10px 15px -3px rgba(0, 0, 0, 0.1), 0 4px 6px -2px rgba(0, 0, 0, 0.05)',
              border: '1px solid #e2e8f0',
              transition: 'transform 0.2s, box-shadow 0.2s',
            cursor: 'pointer',
              height: '100%',
              width: '100%',
              maxWidth: '100%',
              boxSizing: 'border-box',
              overflow: 'hidden',
              contain: 'layout',
              flexShrink: '1',
              flexGrow: '0'
            }} onMouseEnter={(e) => {
              e.currentTarget.style.transform = 'translateY(-5px)';
              e.currentTarget.style.boxShadow = '0 25px 50px -12px rgba(0, 0, 0, 0.25)';
            }} onMouseLeave={(e) => {
              e.currentTarget.style.transform = 'translateY(0)';
              e.currentTarget.style.boxShadow = '0 10px 15px -3px rgba(0, 0, 0, 0.1), 0 4px 6px -2px rgba(0, 0, 0, 0.05)';
            }}>
              <h3 style={{ fontSize: '2.2rem', fontWeight: '700', marginBottom: '16px', color: '#1a202c' }}>
                üöÄ {t.sections.vision}
            </h3>
              <p style={{ color: '#4a5568', fontSize: '1.4rem', lineHeight: '1.6', marginBottom: '24px' }}>
                {t.vision.description}
            </p>
              <div style={{ color: '#667eea', fontSize: '1.4rem', fontWeight: '600' }}>
                {t.sections.viewDetails} ‚Üí
              </div>
          </div>
        </Link>
        </div>
      </section>

      {/* Contact Section */}
      <section style={{ textAlign: 'center', marginBottom: '40px' }}>
        <h2 style={{
          fontSize: '3.5rem',
          fontWeight: '800',
          marginBottom: '32px',
          color: '#1a202c'
        }}>
          üìß {t.contact.title}
        </h2>
        <div style={{
          display: 'flex',
          justifyContent: 'center',
          gap: '32px',
          flexWrap: 'wrap'
        }}>
          <a href="mailto:seongjae.park.dev@gmail.com" style={{
            background: '#667eea',
            color: 'white',
            padding: '16px 32px',
            borderRadius: '25px',
                textDecoration: 'none',
            fontWeight: '600',
            fontSize: '1.3rem',
            transition: 'transform 0.2s, box-shadow 0.2s',
            display: 'inline-block'
          }} onMouseEnter={(e) => {
            e.currentTarget.style.transform = 'translateY(-2px)';
            e.currentTarget.style.boxShadow = '0 10px 20px rgba(102, 126, 234, 0.4)';
          }} onMouseLeave={(e) => {
            e.currentTarget.style.transform = 'translateY(0)';
            e.currentTarget.style.boxShadow = 'none';
          }}>
            üìß {t.contact.email}
          </a>
          <a href="https://github.com/yourusername" target="_blank" rel="noopener noreferrer" style={{
            background: '#2d3748',
            color: 'white',
            padding: '16px 32px',
            borderRadius: '25px',
            textDecoration: 'none',
            fontWeight: '600',
            fontSize: '1.3rem',
            transition: 'transform 0.2s, box-shadow 0.2s',
            display: 'inline-block'
          }} onMouseEnter={(e) => {
            e.currentTarget.style.transform = 'translateY(-2px)';
            e.currentTarget.style.boxShadow = '0 10px 20px rgba(45, 55, 72, 0.4)';
          }} onMouseLeave={(e) => {
            e.currentTarget.style.transform = 'translateY(0)';
            e.currentTarget.style.boxShadow = 'none';
          }}>
            üêô {t.contact.github}
          </a>
        </div>
      </section>
    </div>
  );
};

export default Home;
